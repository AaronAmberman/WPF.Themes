<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    mc:Ignorable="options">
    <!--
        When consuming this ResourceDictionary in App.xaml make sure it is the first ResourceDictionary you consume. That way if you have custom 
        styles they will be applied over this theming. Order is important!
    
        <Application.Resources>
            <ResourceDictionary>
                <ResourceDictionary.MergedDictionaries>
                    <ResourceDictionary Source="pack://application:,,,/DarkThemeHighlight.xaml" />
                    <ResourceDictionary Source="pack://application:,,,/OtherResourceDictionary.xaml" />
                </ResourceDictionary.MergedDictionaries>
            </ResourceDictionary>
        </Application.Resources>
    -->

    <!--
        Background: #FF1F1F1F
        Border: #FF707070
        Foreground: #FFFFFFFF
        Disabled Background: #773D3D3D
        Disabled Border: #FF3D3D3D
        Disabled Foreground:#FF7D7D7D
        Active Accent Color: #FF007BFF
        Inactive Accent Color: #BB5F7296
        MouseOver Background: #77525252
        MouseOver Border: #FFAAAAAA
        Press Background: #770F0F0F
        Press Border: #55AAAAAA
    
        These are not all the colors used below but make up a majority of it and are the colors that represent most major states.
    -->
    
    <!-- 
        Note : there are some strange behaviors with ToolBars and the highlight for controls. If there is only one item in the ToolBar
               and that one item gets focus the highlight will never go away. Not sure why if there is only one item in the ToolBar it
               is unable to release focus for that one item. If there are multiple items this does not occur. There are also instances 
               where you will see an item in a ToolBar highlighted and an item not in a ToolBar highlighted. This again the ToolBar is 
               not letting the focus for the control go which is causing it to stay highlighted. There is different behavior if the 
               controls are added to a ToolBarPanel or directly to the ToolBar. See styling controls for ToolBars here...
               https://docs.microsoft.com/en-us/dotnet/desktop/wpf/controls/how-to-style-controls-on-a-toolbar?view=netframeworkdesktop-4.8
               Notice how they don't use ToolBarPanels directly...maybe this is the key...or just don't use ToolBars. Or you can set 
               Focusable="False" on controls in ToolBars and that should fix it as well but ay cause other problems for you.
    
               The reason this occurs is because Microsoft uses FocusScope to create temporary secondary focus on every ToolBar. This 
               secondary focus scope also is done for Windows, Menus and ContextMenus.
    
               https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.focusmanager.isfocusscope?view=windowsdesktop-6.0
    
               Maybe set FocusManager.IsFocusScope="False" (in XAML) on controls in your ToolBar....or don't use ToolBars.
    
               Suggestion is to not use ToolBars (admittedly though, that is a personal preference).
    -->

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                      Colors                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Color x:Key="Accent.Color">#FF007BFF</Color>
    
    <Color x:Key="ArrowPath.Background.Color">#FFFFFFFF</Color>
    <Color x:Key="ArrowPath.Border.Color">#FFFFFFFF</Color>
    
    <Color x:Key="Button.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="Button.Border.Color">#FF707070</Color>
    <Color x:Key="Button.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="Button.IsDefault.Border.Color">#FF007BFF</Color>
    <Color x:Key="Button.MouseOver.Background.Color">#77525252</Color>
    <Color x:Key="Button.MouseOver.Border.Color">#FFAAAAAA</Color>
    <Color x:Key="Button.Pressed.Background.Color">#770F0F0F</Color>
    <Color x:Key="Button.Pressed.Border.Color">#55AAAAAA</Color>
    <Color x:Key="Button.Disabled.Background.Color">#773D3D3D</Color>
    <Color x:Key="Button.Disabled.Border.Color">#FF3D3D3D</Color>
    <Color x:Key="Button.Disabled.Foreground.Color">#FF7D7D7D</Color>
    
    <Color x:Key="Calendar.Background.GradientStop1.Color">#FF222222</Color>
    <Color x:Key="Calendar.Background.GradientStop2.Color">#FF212121</Color>
    <Color x:Key="Calendar.Background.GradientStop3.Color">#FF202020</Color>
    <Color x:Key="Calendar.Background.GradientStop4.Color">#FF1F1F1F</Color>
    <Color x:Key="Calendar.Border.GradientStop1.Color">#FF737373</Color>
    <Color x:Key="Calendar.Border.GradientStop2.Color">#FF727272</Color>
    <Color x:Key="Calendar.Border.GradientStop3.Color">#FF717171</Color>
    <Color x:Key="Calendar.Border.GradientStop4.Color">#FF707070</Color>
    <Color x:Key="Calendar.Foreground.Color">#FFFFFFFF</Color>
    
    <Color x:Key="CalendarButton.Background.Color">#88007BFF</Color>
    <Color x:Key="CalendarButton.FocusVisual.Border.Color">#FFFFFFFF</Color>
    <Color x:Key="CalendarButton.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="CalendarButton.Inactive.Foreground.Color">#FF7D7D7D</Color>  
    
    <Color x:Key="CalendarDayButton.Blackout.Background.Color">#FF000000</Color>
    <Color x:Key="CalendarDayButton.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="CalendarDayButton.Inactive.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="CalendarDayButton.Today.Background.Color">#55007BFF</Color>
    <Color x:Key="CalendarDayButton.Today.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="CalendarDayButton.Today.Highlight.Background.Color">#88007BFF</Color>
    <Color x:Key="CalendarDayButton.Today.Selected.Background.Color">#AA007BFF</Color>
    
    <Color x:Key="CalendarItem.Root.Disabled.Background.Color">#AA444444</Color>
    <Color x:Key="CalendarItem.Inner.Border.Color">#FF2F2F2F</Color>
    <Color x:Key="CalendarItem.HeaderButton.Background.Color">#FF007BFF</Color>
    <Color x:Key="CalendarItem.HeaderButton.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="CalendarItem.HeaderButton.Next.Background.Color">#FFFFFFFF</Color>
    <Color x:Key="CalendarItem.HeaderButton.Previous.Background.Color">#FFFFFFFF</Color>
    <Color x:Key="CalendarItem.HeaderButton.Rectangle.Background.Color">#00000000</Color>

    <Color x:Key="ComboBox.Background.GradientStop1.Color">#FF4F4F4F</Color>
    <Color x:Key="ComboBox.Background.GradientStop2.Color">#FF4F4F4F</Color>
    <Color x:Key="ComboBox.Border.Color">#FF4F4F4F</Color>
    <Color x:Key="ComboBox.Disabled.Background.Color">#773D3D3D</Color>
    <Color x:Key="ComboBox.Disabled.Border.Color">#FF4F4F4F</Color>
    <Color x:Key="ComboBox.Disabled.Foreground.Color">#773D3D3D</Color>
    <Color x:Key="ComboBox.Disabled.Editable.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ComboBox.Disabled.Glyph.Color">#FF444444</Color>
    <Color x:Key="ComboBox.DropDown.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ComboBox.DropDown.Border.Color">#FF5F5F5F</Color>
    <Color x:Key="ComboBox.Editable.Background.Color">#FF4F4F4F</Color>
    <Color x:Key="ComboBox.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="ComboBox.Glyph.Color">#FFFFFFFF</Color>
    <Color x:Key="ComboBox.MouseOver.Background.GradientStop1.Color">#FF1F1F1F</Color>
    <Color x:Key="ComboBox.MouseOver.Background.GradientStop2.Color">#FF1F1F1F</Color>
    <Color x:Key="ComboBox.MouseOver.Editable.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ComboBox.MouseOver.Editable.Border.Color">#FFCCCCCC</Color>
    <Color x:Key="ComboBox.MouseOver.Border.Color">#FFCCCCCC</Color>

    <Color x:Key="ComboBoxItem.Background.Color">#00000000</Color>
    <Color x:Key="ComboBoxItem.Border.Color">#00000000</Color>
    <Color x:Key="ComboBoxItem.Disabled.Foreground.Color">#FF808080</Color>
    <Color x:Key="ComboBoxItem.ItemsviewHover.Background.Color">#77525252</Color>
    <Color x:Key="ComboBoxItem.ItemsviewHover.Border.Color">#FFAAAAAA</Color>
    <Color x:Key="ComboBoxItem.ItemsviewSelected.Background.Color">#3D007BFF</Color>
    <Color x:Key="ComboBoxItem.ItemsviewSelected.Border.Color">#BB007BFF</Color>
    <Color x:Key="ComboBoxItem.ItemsviewSelectedHover.Background.Color">#77007BFF</Color>
    <Color x:Key="ComboBoxItem.ItemsviewSelectedHover.Border.Color">#FF007BFF</Color>

    <Color x:Key="ContextMenu.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ContextMenu.Border.Color">#FF888888</Color>
    <Color x:Key="ContextMenu.Foregound.Color">#FFFFFFFF</Color>
    <Color x:Key="ContextMenu.Splitter.Color1.Color">#FFFFFFFF</Color>
    <Color x:Key="ContextMenu.Splitter.Color2.Color">#FFFFFFFF</Color>

    <Color x:Key="CurrentEntryBackground.Color">#FF0078D7</Color>

    <Color x:Key="DatePicker.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="DatePicker.Background.Pressed.Color">#770F0F0F</Color>
    <Color x:Key="DatePicker.Border.GradientStop1.Color">#FF707070</Color>
    <Color x:Key="DatePicker.Border.GradientStop2.Color">#FF707070</Color>
    <Color x:Key="DatePicker.Border.GradientStop3.Color">#FF707070</Color>
    <Color x:Key="DatePicker.Border.GradientStop4.Color">#FF707070</Color>
    <Color x:Key="DatePicker.Border.MouseOver.GradientStop2.Color">#FF5F5F5F</Color>
    <Color x:Key="DatePicker.Border.MouseOver.GradientStop3.Color">#FF5F5F5F</Color>
    <Color x:Key="DatePicker.Border.MouseOver.GradientStop4.Color">#FF5F5F5F</Color>
    <Color x:Key="DatePicker.Border.Pressed.GradientStop1.Color">#55AAAAAA</Color>
    <Color x:Key="DatePicker.Border.Pressed.GradientStop2.Color">#55AAAAAA</Color>
    <Color x:Key="DatePicker.Border.Pressed.GradientStop3.Color">#55AAAAAA</Color>
    <Color x:Key="DatePicker.Border.Pressed.GradientStop4.Color">#55AAAAAA</Color>
    <Color x:Key="DatePicker.Calendar.Circle.Background.Color">#FFCCCCCC</Color>
    <Color x:Key="DatePicker.Calendar.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="DatePicker.Disabled.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="DatePicker.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="DatePicker.Inner.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="DatePicker.Inner.Background.GradientStop1.Color">#FF4F4F4F</Color>
    <Color x:Key="DatePicker.Inner.Background.GradientStop2.Color">#FF4F4F4F</Color>
    <Color x:Key="DatePicker.Inner.Background.GradientStop3.Color">#FF4F4F4F</Color>
    <Color x:Key="DatePicker.Inner.Background.GradientStop4.Color">#FF4F4F4F</Color>
    <Color x:Key="DatePicker.Inner.Background.Gradient.Border.Color">#BF000000</Color>
    <Color x:Key="DatePicker.Inner.Highlight.Color">#FF007BFF</Color>
    <Color x:Key="DatePicker.Inner.Inner.Background.Color">#FF1F3B53</Color>
    <Color x:Key="DatePicker.Inner.Inner.Border.Color">#FFFFFFFF</Color>
    <Color x:Key="DatePicker.Inner.Rectangle.Background.GradientStop1.Color">#FF007BFF</Color>
    <Color x:Key="DatePicker.Inner.Rectangle.Background.GradientStop2.Color">#AA007BFF</Color>
    <Color x:Key="DatePicker.Inner.Rectangle.Border.GradientStop1.Color">#FF707070</Color>
    <Color x:Key="DatePicker.Inner.Rectangle.Border.GradientStop2.Color">#FF707070</Color>
    <Color x:Key="DatePicker.Popup.Background.Color">#FF1F1F1F</Color>

    <Color x:Key="DropShadow.Color">#91000000</Color>
    
    <Color x:Key="Expander.Background.Color">#00000000</Color>
    <Color x:Key="Expander.Border.Color">#00000000</Color>
    <Color x:Key="Expander.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="Expander.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="Expander.Circle.Stroke.Color">#FF1F1F1F</Color>
    <Color x:Key="Expander.Circle.Fill.Color">#FF007BFF</Color>
    <Color x:Key="Expander.Arrow.Stroke.Color">#FFFFFFFF</Color>
    <Color x:Key="Expander.MouseOver.Circle.Stroke.Color">#FFAAAAAA</Color>
    <Color x:Key="Expander.MouseOver.Circle.Fill.Color">#FF1F1F1F</Color>
    <Color x:Key="Expander.MouseOver.Arrow.Stroke.Color">#FFFFFFFF</Color>
    <Color x:Key="Expander.Pressed.Circle.Stroke.Color">#55AAAAAA</Color>
    <Color x:Key="Expander.Pressed.Circle.Fill.Color">#770F0F0F</Color>
    <Color x:Key="Expander.Pressed.Arrow.Stroke.Color">#FF7F7F7F</Color>
    <Color x:Key="Expander.Disabled.Circle.Stroke.Color">#FF505050</Color>
    <Color x:Key="Expander.Disabled.Circle.Fill.Color">#FF505050</Color>
    <Color x:Key="Expander.Disabled.Arrow.Stroke.Color">#FF707070</Color>
    
    <Color x:Key="FocusVisual.Stroke.Color">#FFFFFFFF</Color>
    
    <Color x:Key="FrameNavChrome.Path.Fill.GradientStop1.Color">#A0C2CCE7</Color>
    <Color x:Key="FrameNavChrome.Path.Fill.GradientStop2.Color">#60FFFFFF</Color>
    <Color x:Key="FrameNavChrome.Path.Stroke.GradientStop1.Color">#FFB7C2E3</Color>
    <Color x:Key="FrameNavChrome.Path.Stroke.GradientStop2.Color">#A0FFFFFF</Color>
    
    <Color x:Key="GridSplitter.Background.Color">#FFFFFFFF</Color>
    <Color x:Key="GridSplitter.PreviewStyle.Background.Color">#FFFFFFFF</Color>

    <Color x:Key="GridViewColumnHeaderGripper.Background.GradientStop1.Color">#FF707070</Color>
    <Color x:Key="GridViewColumnHeaderGripper.Background.GradientStop2.Color">#FF707070</Color>
    <Color x:Key="GridViewColumnHeaderGripper.Border.GradientStop1.Color">#FF707070</Color>
    <Color x:Key="GridViewColumnHeaderGripper.Border.GradientStop2.Color">#FF707070</Color>
    <Color x:Key="GridViewColumnHeaderGripper.Inner.Border.Color">#00000000</Color>
    
    <Color x:Key="GridViewColumnHeader.Background.GradientStop1.Color">#FF1F1F1F</Color>
    <Color x:Key="GridViewColumnHeader.Background.GradientStop2.Color">#FF1F1F1F</Color>
    <Color x:Key="GridViewColumnHeader.Border.GradientStop1.Color">#FF1F1F1F</Color>
    <Color x:Key="GridViewColumnHeader.Border.GradientStop2.Color">#FF1F1F1F</Color>
    <Color x:Key="GridViewColumnHeader.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="GridViewColumnHeader.Floating.Background.Color">#60000000</Color>
    <Color x:Key="GridViewColumnHeader.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="GridViewColumnHeader.MouseOver.Background.GradientStop1.Color">#FF2F2F2F</Color>
    <Color x:Key="GridViewColumnHeader.MouseOver.Background.GradientStop2.Color">#FF2F2F2F</Color>
    <Color x:Key="GridViewColumnHeader.MouseOver.Border.GradientStop1.Color">#FF1F1F1F</Color>
    <Color x:Key="GridViewColumnHeader.MouseOver.Border.GradientStop2.Color">#FF707070</Color>
    <Color x:Key="GridViewColumnHeader.Pressed.Background.GradientStop1.Color">#FF0F0F0F</Color>
    <Color x:Key="GridViewColumnHeader.Pressed.Background.GradientStop2.Color">#FF0F0F0F</Color>
    <Color x:Key="GridViewColumnHeader.Pressed.Border.GradientStop1.Color">#FF1F1F1F</Color>
    <Color x:Key="GridViewColumnHeader.Pressed.Border.GradientStop2.Color">#FFAAAAAA</Color>
    
    <Color x:Key="GroupBox.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="GroupBox.Border.Color">#FF007BFF</Color>
    <Color x:Key="GroupBox.Disabled.Border.Color">#88007BFF</Color>
    <Color x:Key="GroupBox.Disabled.Background.Color">#BB444444</Color>
    <Color x:Key="GroupBox.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="GroupBox.Foreground.Color">#FFFFFFFF</Color>

    <Color x:Key="Hyperlink.Disabled.Foreground.Color">#FFAAAAAA</Color>
    <Color x:Key="Hyperlink.Foreground.Color">#FF007BFF</Color>
    <Color x:Key="Hyperlink.MouseOver.Foreground.Color">#FF218CFF</Color>
    
    <Color x:Key="Label.Background.Color">#00000000</Color>
    <Color x:Key="Label.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="Label.Disabled.Foreground.Color">#FFAAAAAA</Color>

    <Color x:Key="ListBox.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ListBox.Border.Color">#FF707070</Color>
    <Color x:Key="ListBox.Disabled.Background.Color">#773D3D3D</Color>
    <Color x:Key="ListBox.Disabled.Border.Color">#FF3D3D3D</Color>
    <Color x:Key="ListBox.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="ListBox.Disabled.Foreground.Color">#FF7D7D7D</Color>

    <Color x:Key="ListBoxItem.MouseOver.Background.Color">#77525252</Color>
    <Color x:Key="ListBoxItem.MouseOver.Border.Color">#FFAAAAAA</Color>
    <Color x:Key="ListBoxItem.SelectedActive.Background.Color">#33007BFF</Color>
    <Color x:Key="ListBoxItem.SelectedActive.Border.Color">#CC007BFF</Color>
    <Color x:Key="ListBoxItem.SelectedActive.MouseOver.Background.Color">#66007BFF</Color>
    <Color x:Key="ListBoxItem.SelectedActive.MouseOver.Border.Color">#FF007BFF</Color>
    <Color x:Key="ListBoxItem.SelectedInactive.Background.Color">#18007BFF</Color>
    <Color x:Key="ListBoxItem.SelectedInactive.Border.Color">#44007BFF</Color>
    
    <Color x:Key="ListView.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ListView.Border.Color">#FF707070</Color>
    <Color x:Key="ListView.Disabled.Background.Color">#773D3D3D</Color>
    <Color x:Key="ListView.Disabled.Border.Color">#FF3D3D3D</Color>
    <Color x:Key="ListView.Foreground.Color">#FFFFFFFF</Color>

    <Color x:Key="Item.MouseOver.Background.Color">#77525252</Color>
    <Color x:Key="Item.MouseOver.Border.Color">#FFAAAAAA</Color>
    <Color x:Key="Item.SelectedActive.Background.Color">#33007BFF</Color>
    <Color x:Key="Item.SelectedActive.Border.Color">#CC007BFF</Color>
    <Color x:Key="Item.SelectedActive.MouseOver.Background.Color">#66007BFF</Color>
    <Color x:Key="Item.SelectedActive.MouseOver.Border.Color">#FF007BFF</Color>
    <Color x:Key="Item.SelectedInactive.Background.Color">#18007BFF</Color>
    <Color x:Key="Item.SelectedInactive.Border.Color">#44007BFF</Color>

    <Color x:Key="Menu.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="Menu.Border.Color">#FF707070</Color>
    <Color x:Key="Menu.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="Menu.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="Menu.Separator.Color">#FFDDDDDD</Color>

    <Color x:Key="MenuItem.Highlight.Background.Color">#77525252</Color>
    <Color x:Key="MenuItem.Highlight.Border.Color">#FFAAAAAA</Color>
    <Color x:Key="MenuItem.Highlight.Disabled.Background.Color">#773D3D3D</Color>
    <Color x:Key="MenuItem.Highlight.Disabled.Border.Color">#FF3D3D3D</Color>
    <Color x:Key="MenuItem.Selected.Background.Color">#33007BFF</Color>
    <Color x:Key="MenuItem.Selected.Border.Color">#CC007BFF</Color>

    <Color x:Key="MenuScrollButton.Background.Color">#00000000</Color>
    <Color x:Key="MenuScrollButton.Border.Color">#00000000</Color>    

    <Color x:Key="OptionMark.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="OptionMark.Border.Color">#FF707070</Color>
    <Color x:Key="OptionMark.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="OptionMark.Glyph.Color">#FFFFFFFF</Color>
    <Color x:Key="OptionMark.Root.Background.Color">#00000000</Color>
    <Color x:Key="OptionMark.MouseOver.Background.Color">#77525252</Color>
    <Color x:Key="OptionMark.MouseOver.Border.Color">#FFAAAAAA</Color>
    <Color x:Key="OptionMark.MouseOver.Glyph.Color">#FFFFFFFF</Color>
    <Color x:Key="OptionMark.Pressed.Background.Color">#770F0F0F</Color>
    <Color x:Key="OptionMark.Pressed.Border.Color">#FF777777</Color>
    <Color x:Key="OptionMark.Pressed.Glyph.Color">#FF212121</Color>
    <Color x:Key="OptionMark.Disabled.Background.Color">#AA4F4F4F</Color>
    <Color x:Key="OptionMark.Disabled.Border.Color">#AA4F4F4F</Color>
    <Color x:Key="OptionMark.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="OptionMark.Disabled.Glyph.Color">#FF5F5F5F</Color>

    <Color x:Key="ProgressBar.Progress.Color">#FF007BFF</Color>
    <Color x:Key="ProgressBar.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ProgressBar.Border.Color">#FF707070</Color>
    <Color x:Key="ProgressBar.Disabled.Color">#FF505050</Color>

    <Color x:Key="RadioButton.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="RadioButton.Border.Color">#FF707070</Color>
    <Color x:Key="RadioButton.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="RadioButton.Glyph.Color">#FFFFFFFF</Color>
    <Color x:Key="RadioButton.MouseOver.Background.Color">#77525252</Color>
    <Color x:Key="RadioButton.MouseOver.Border.Color">#FFAAAAAA</Color>
    <Color x:Key="RadioButton.MouseOver.Glyph.Color">#FFFFFFFF</Color>
    <Color x:Key="RadioButton.Pressed.Background.Color">#770F0F0F</Color>
    <Color x:Key="RadioButton.Pressed.Border.Color">#FF777777</Color>
    <Color x:Key="RadioButton.Pressed.Glyph.Color">#FF212121</Color>
    <Color x:Key="RadioButton.Root.Background.Color">#00000000</Color>
    <Color x:Key="RadioButton.Disabled.Background.Color">#AA4F4F4F</Color>
    <Color x:Key="RadioButton.Disabled.Border.Color">#AA4F4F4F</Color>
    <Color x:Key="RadioButton.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="RadioButton.Disabled.Glyph.Color">#FF5F5F5F</Color>
    
    <Color x:Key="RepeatButton.Transparent.Background.Color">#00000000</Color>

    <Color x:Key="ScrollBarButton.Background.Color">#FF3F3F3F</Color>
    <Color x:Key="ScrollBarButton.Border.Color">#FF3F3F3F</Color>
    <Color x:Key="ScrollBarButton.MouseOver.Background.Color">#88FFFFFF</Color>
    <Color x:Key="ScrollBarButton.MouseOver.Border.Color">#88FFFFFF</Color>
    <Color x:Key="ScrollBarButton.Pressed.Background.Color">#FF606060</Color>
    <Color x:Key="ScrollBarButton.Pressed.Border.Color">#FF606060</Color>
    <Color x:Key="ScrollBarButton.Disabled.Background.Color">#FF707070</Color>
    <Color x:Key="ScrollBarButton.Disabled.Border.Color">#FF707070</Color>

    <Color x:Key="ScrollBar.Background.Color">#FF3F3F3F</Color>
    <Color x:Key="ScrollBar.Border.Color">#FF3F3F3F</Color>
    <Color x:Key="ScrollBar.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="ScrollBar.Glyph.Color">#FFFFFFFF</Color>
    <Color x:Key="ScrollBar.Thumb.Color">#33FFFFFF</Color>
    <Color x:Key="ScrollBar.MouseOver.Glyph.Color">#FF1F1F1F</Color>
    <Color x:Key="ScrollBar.MouseOver.Thumb.Color">#88FFFFFF</Color>
    <Color x:Key="ScrollBar.Pressed.Glyph.Color">#FF1F1F1F</Color>
    <Color x:Key="ScrollBar.Pressed.Thumb.Color">#88FFFFFF</Color>
    <Color x:Key="ScrollBar.Disabled.Glyph.Color">#FFCCCCCC</Color>
    <Color x:Key="ScrollBar.Disabled.Thumb.Color">#FF707070</Color>
    
    <Color x:Key="Separator.Background.Color">#FFC0C0C0</Color>
    
    <Color x:Key="Slider.Background.Color">#00000000</Color>
    <Color x:Key="Slider.Border.Color">#00000000</Color>
    <Color x:Key="Slider.Disabled.Background.Color">#AA505050</Color>
    <Color x:Key="Slider.SelectionRange.Background.Color">#FF007BFF</Color>
    <Color x:Key="Slider.IsKeyboardfocused.Foreground.Color">#FF007BFF</Color>

    <Color x:Key="SliderThumb.Background.Color">#FF007BFF</Color>
    <Color x:Key="SliderThumb.Border.Color">#FF007BFF</Color>
    <Color x:Key="SliderThumb.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="SliderThumb.MouseOver.Background.Color">#FF1284FF</Color>
    <Color x:Key="SliderThumb.MouseOver.Border.Color">#FF1284FF</Color>
    <Color x:Key="SliderThumb.Pressed.Background.Color">#FF0073F0</Color>
    <Color x:Key="SliderThumb.Pressed.Border.Color">#FF0073F0</Color>
    <Color x:Key="SliderThumb.Disabled.Background.Color">#FF505050</Color>
    <Color x:Key="SliderThumb.Disabled.Border.Color">#FF505050</Color>
    <Color x:Key="SliderThumb.Track.Background.Color">#FF707070</Color>
    <Color x:Key="SliderThumb.Track.Border.Color">#FF707070</Color>
    
    <Color x:Key="StatusBar.Background.Color">#FF3F3F3F</Color>
    <Color x:Key="StatusBar.Foreground.Color">#FFFFFFFF</Color>
    
    <Color x:Key="StatusBarItem.Background.Color">#00000000</Color>
    <Color x:Key="StatusBarItem.Border.Color">#00000000</Color>
    <Color x:Key="StatusBarItem.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="StatusBarItem.Foreground.Color">#FFFFFFFF</Color>

    <Color x:Key="TabControl.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="TabControl.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="TabControl.TabPanel.Background.Color">#00000000</Color>

    <Color x:Key="TabItem.Accent.Color">#FF007BFF</Color>
    <Color x:Key="TabItem.Background.GradientStop1.Color">#FF1F1F1F</Color>
    <Color x:Key="TabItem.Background.GradientStop2.Color">#FF1F1F1F</Color>
    <Color x:Key="TabItem.Border.Color">#FF707070</Color>
    <Color x:Key="TabItem.Disabled.Background.Color">#FF505050</Color>
    <Color x:Key="TabItem.Disabled.Border.Color">#FF606060</Color>
    <Color x:Key="TabItem.MouseOver.Background.GradientStop1.Color">#FF3F3F3F</Color>
    <Color x:Key="TabItem.MouseOver.Background.GradientStop2.Color">#FF3F3F3F</Color>
    <Color x:Key="TabItem.MouseOver.Border.Color">#FF0073F0</Color>
    <Color x:Key="TabItem.Selected.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="TabItem.Selected.Border.Color">#FF707070</Color>

    <Color x:Key="TextBoxBase.Background.Color">#FF4F4F4F</Color>
    <Color x:Key="TextBoxBase.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="TextBoxBase.InactiveSelection.Color">#330073F0</Color>

    <Color x:Key="TextBox.Focus.Border.Color">#BB0073F0</Color>
    <Color x:Key="TextBox.MouseOver.Border.Color">#FF0073F0</Color>
    <Color x:Key="TextBox.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="TextBox.Border.Color">#FF707070</Color>
    <Color x:Key="TextBox.ContentHost.Background.Color">#FF707070</Color>
    <Color x:Key="TextBox.Watermark.Color">#FFAAAAAA</Color>
    
    <Color x:Key="ToolBarButtonHover.Color">#210080FF</Color>
    <Color x:Key="ToolBarMenuBorder.Color">#FFB6BDC5</Color>
    <Color x:Key="ToolBarHorizontalOverflow.Path.Border.Color">#FFFFFFFF</Color>
    <Color x:Key="ToolBarVerticalOverflow.Path.Border.Color">#FFFFFFFF</Color>
    <Color x:Key="ToolBarSubMenuBackground.Color">#FF1F1F1F</Color>
    <Color x:Key="ToolBarHorizontalBackground.Color">#FF1F1F1F</Color>
    <Color x:Key="ToolBarVerticalBackground.Color">#FF1F1F1F</Color>
    <Color x:Key="ToolBarGripper.Color">#FFFFFFFF</Color>
    <Color x:Key="ToolBarToggleButtonHorizontalBackground.Color">#FF1F1F1F</Color>
    <Color x:Key="ToolBarToggleButtonVerticalBackground.Color">#FF1F1F1F</Color>
    
    <Color x:Key="ToolBar.Thumb.Background.Color">#00000000</Color>
    <Color x:Key="ToolBar.Thumb.GeometryDrawing.Color">#FFFFFFFF</Color>
    <Color x:Key="ToolBar.Disabled.Foreground.Color">#FF808080</Color>
    
    <Color x:Key="ToolBarTray.Background.Color">#FF1F1F1F</Color>
    
    <Color x:Key="ToolTip.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="ToolTip.Border.Color">#FF707070</Color>
    <Color x:Key="ToolTip.Foreground.Color">#FFFFFFFF</Color>
    
    <Color x:Key="TreeView.Background.Color">#FF1F1F1F</Color>
    <Color x:Key="TreeView.Border.Color">#FF707070</Color>
    <Color x:Key="TreeView.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="TreeView.Foreground.Color">#FFFFFFFF</Color>
    
    <Color x:Key="TreeViewItem.Background.Color">#00000000</Color>
    <Color x:Key="TreeViewItem.Disabled.Foreground.Color">#FF7D7D7D</Color>
    <Color x:Key="TreeViewItem.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="TreeViewItem.Selected.Background.Color">#FF007BFF</Color>
    <Color x:Key="TreeViewItem.Selected.Foreground.Color">#FFFFFFFF</Color>
    <Color x:Key="TreeViewItem.TreeArrow.Background.Color">#FFCCCCCC</Color>
    <Color x:Key="TreeViewItem.TreeArrow.Border.Color">#FFCCCCCC</Color>
    <Color x:Key="TreeViewItem.TreeArrow.MouseOver.Background.Color">#FFFFFFFF</Color>
    <Color x:Key="TreeViewItem.TreeArrow.MouseOver.Border.Color">#FFFFFFFF</Color>
    <Color x:Key="TreeViewItem.TreeArrow.Checked.Background.Color">#FF707070</Color>
    <Color x:Key="TreeViewItem.TreeArrow.Checked.Border.Color">#FF1F1F1F</Color>
    <Color x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Background.Color">#FFFFFFFF</Color>
    <Color x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Border.Color">#FFFFFFFF</Color>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                     Brushes                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <SolidColorBrush x:Key="Accent" Color="{DynamicResource Accent.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ArrowPath.Background" Color="{DynamicResource ArrowPath.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ArrowPath.Border" Color="{DynamicResource ArrowPath.Border.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="Button.Background" Color="{DynamicResource Button.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.Border" Color="{DynamicResource Button.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.Foreground" Color="{DynamicResource Button.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.IsDefault.Border" Color="{DynamicResource Button.IsDefault.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="{DynamicResource Button.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="{DynamicResource Button.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="{DynamicResource Button.Pressed.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="{DynamicResource Button.Pressed.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="{DynamicResource Button.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="{DynamicResource Button.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="{DynamicResource Button.Disabled.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="Calendar.Background.GradientStop1" Color="{DynamicResource Calendar.Background.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Background.GradientStop2" Color="{DynamicResource Calendar.Background.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Background.GradientStop3" Color="{DynamicResource Calendar.Background.GradientStop3.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Background.GradientStop4" Color="{DynamicResource Calendar.Background.GradientStop4.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Border.GradientStop1" Color="{DynamicResource Calendar.Border.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Border.GradientStop2" Color="{DynamicResource Calendar.Border.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Border.GradientStop3" Color="{DynamicResource Calendar.Border.GradientStop3.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Border.GradientStop4" Color="{DynamicResource Calendar.Border.GradientStop4.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Calendar.Foreground" Color="{DynamicResource Calendar.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="CalendarButton.Background" Color="{DynamicResource CalendarButton.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarButton.Foreground" Color="{DynamicResource CalendarButton.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarButton.Inactive.Foreground" Color="{DynamicResource CalendarButton.Inactive.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarButton.FocusVisual.Border" Color="{DynamicResource CalendarButton.FocusVisual.Border.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="CalendarDayButton.Blackout.Background" Color="{DynamicResource CalendarDayButton.Blackout.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarDayButton.Foreground" Color="{DynamicResource CalendarDayButton.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarDayButton.Inactive.Foreground" Color="{DynamicResource CalendarDayButton.Inactive.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarDayButton.Today.Background" Color="{DynamicResource CalendarDayButton.Today.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarDayButton.Today.Foreground" Color="{DynamicResource CalendarDayButton.Today.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarDayButton.Today.Highlight.Background" Color="{DynamicResource CalendarDayButton.Today.Highlight.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarDayButton.Today.Selected.Background" Color="{DynamicResource CalendarDayButton.Today.Selected.Background.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="CalendarItem.Root.Disabled.Background" Color="{DynamicResource CalendarItem.Root.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarItem.Inner.Border" Color="{DynamicResource CalendarItem.Inner.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarItem.HeaderButton.Background" Color="{DynamicResource CalendarItem.HeaderButton.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarItem.HeaderButton.Foreground" Color="{DynamicResource CalendarItem.HeaderButton.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarItem.HeaderButton.Next.Background" Color="{DynamicResource CalendarItem.HeaderButton.Next.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarItem.HeaderButton.Previous.Background" Color="{DynamicResource CalendarItem.HeaderButton.Previous.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="CalendarItem.HeaderButton.Rectangle.Background" Color="{DynamicResource CalendarItem.HeaderButton.Rectangle.Background.Color}" options:Freeze="True"/>

    <LinearGradientBrush x:Key="ComboBox.Background" EndPoint="0,1" StartPoint="0,0" options:Freeze="True">
        <GradientStop Color="{DynamicResource ComboBox.Background.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource ComboBox.Background.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Border" Color="{DynamicResource ComboBox.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="{DynamicResource ComboBox.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="{DynamicResource ComboBox.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="{DynamicResource ComboBox.Disabled.Editable.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Foreground" Color="{DynamicResource ComboBox.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="{DynamicResource ComboBox.Disabled.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.DropDown.Background" Color="{DynamicResource ComboBox.DropDown.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.DropDown.Border" Color="{DynamicResource ComboBox.DropDown.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Editable.Background" Color="{DynamicResource ComboBox.Editable.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Foreground" Color="{DynamicResource ComboBox.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.Glyph" Color="{DynamicResource ComboBox.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="{DynamicResource ComboBox.MouseOver.Editable.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="{DynamicResource ComboBox.MouseOver.Editable.Border.Color}" options:Freeze="True"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0" options:Freeze="True">
        <GradientStop Color="{DynamicResource ComboBox.MouseOver.Background.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource ComboBox.MouseOver.Background.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="{DynamicResource ComboBox.MouseOver.Border.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="ComboBoxItem.Background" Color="{DynamicResource ComboBoxItem.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.Border" Color="{DynamicResource ComboBoxItem.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.Disabled.Foreground" Color="{DynamicResource ComboBoxItem.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="{DynamicResource ComboBoxItem.ItemsviewHover.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="{DynamicResource ComboBoxItem.ItemsviewHover.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="{DynamicResource ComboBoxItem.ItemsviewSelected.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="{DynamicResource ComboBoxItem.ItemsviewSelected.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Border.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="ContextMenu.Background" Color="{DynamicResource ContextMenu.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ContextMenu.Border" Color="{DynamicResource ContextMenu.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ContextMenu.Foreground" Color="{DynamicResource ContextMenu.Foregound.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ContextMenu.Splitter.Color1" Color="{DynamicResource ContextMenu.Splitter.Color1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ContextMenu.Splitter.Color2" Color="{DynamicResource ContextMenu.Splitter.Color2.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="CurrentEntryBackground" Color="{DynamicResource CurrentEntryBackground.Color}" Opacity="0.25" options:Freeze="True"/>

    <SolidColorBrush x:Key="DatePicker.Background" Color="{DynamicResource DatePicker.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Background.Pressed" Color="{DynamicResource DatePicker.Background.Pressed.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.GradientStop1" Color="{DynamicResource DatePicker.Border.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.GradientStop2" Color="{DynamicResource DatePicker.Border.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.GradientStop3" Color="{DynamicResource DatePicker.Border.GradientStop3.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.GradientStop4" Color="{DynamicResource DatePicker.Border.GradientStop4.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.MouseOver.GradientStop2" Color="{DynamicResource DatePicker.Border.MouseOver.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.MouseOver.GradientStop3" Color="{DynamicResource DatePicker.Border.MouseOver.GradientStop3.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.MouseOver.GradientStop4" Color="{DynamicResource DatePicker.Border.MouseOver.GradientStop4.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.Pressed.GradientStop1" Color="{DynamicResource DatePicker.Border.Pressed.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.Pressed.GradientStop2" Color="{DynamicResource DatePicker.Border.Pressed.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.Pressed.GradientStop3" Color="{DynamicResource DatePicker.Border.Pressed.GradientStop3.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Border.Pressed.GradientStop4" Color="{DynamicResource DatePicker.Border.Pressed.GradientStop4.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Foreground" Color="{DynamicResource DatePicker.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Calendar.Foreground" Color="{DynamicResource DatePicker.Calendar.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Calendar.Circle.Background" Color="{DynamicResource DatePicker.Calendar.Circle.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Disabled.Background" Color="{DynamicResource DatePicker.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Background" Color="{DynamicResource DatePicker.Inner.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Background.GradientStop1" Color="{DynamicResource DatePicker.Inner.Background.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Background.GradientStop2" Color="{DynamicResource DatePicker.Inner.Background.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Background.GradientStop3" Color="{DynamicResource DatePicker.Inner.Background.GradientStop3.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Background.GradientStop4" Color="{DynamicResource DatePicker.Inner.Background.GradientStop4.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Background.Gradient.Border" Color="{DynamicResource DatePicker.Inner.Background.Gradient.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Highlight" Color="{DynamicResource DatePicker.Inner.Highlight.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Inner.Background" Color="{DynamicResource DatePicker.Inner.Inner.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Inner.Border" Color="{DynamicResource DatePicker.Inner.Inner.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Rectangle.Background.GradientStop1" Color="{DynamicResource DatePicker.Inner.Rectangle.Background.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Rectangle.Background.GradientStop2" Color="{DynamicResource DatePicker.Inner.Rectangle.Background.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Rectangle.Border.GradientStop1" Color="{DynamicResource DatePicker.Inner.Rectangle.Border.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="DatePicker.Inner.Rectangle.Border.GradientStop2" Color="{DynamicResource DatePicker.Inner.Rectangle.Border.GradientStop2.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="DropShadow" Color="{DynamicResource DropShadow.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="Expander.Background" Color="{DynamicResource Expander.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Border" Color="{DynamicResource Expander.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Disabled.Foreground" Color="{DynamicResource Expander.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Foreground" Color="{DynamicResource Expander.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Circle.Stroke" Color="{DynamicResource Expander.Circle.Stroke.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Circle.Fill" Color="{DynamicResource Expander.Circle.Fill.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Arrow.Stroke" Color="{DynamicResource Expander.Arrow.Stroke.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="{DynamicResource Expander.MouseOver.Circle.Stroke.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="{DynamicResource Expander.MouseOver.Circle.Fill.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="{DynamicResource Expander.MouseOver.Arrow.Stroke.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="{DynamicResource Expander.Pressed.Circle.Stroke.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="{DynamicResource Expander.Pressed.Circle.Fill.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="{DynamicResource Expander.Pressed.Arrow.Stroke.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="{DynamicResource Expander.Disabled.Circle.Stroke.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="{DynamicResource Expander.Disabled.Circle.Fill.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="{DynamicResource Expander.Disabled.Arrow.Stroke.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="FocusVisual.Stroke" Color="{DynamicResource FocusVisual.Stroke.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="FrameNavChrome.Path.Fill.GradientStop1" Color="{DynamicResource FrameNavChrome.Path.Fill.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="FrameNavChrome.Path.Fill.GradientStop2" Color="{DynamicResource FrameNavChrome.Path.Fill.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="FrameNavChrome.Stroke.Fill.GradientStop1" Color="{DynamicResource FrameNavChrome.Path.Stroke.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="FrameNavChrome.Stroke.Fill.GradientStop2" Color="{DynamicResource FrameNavChrome.Path.Stroke.GradientStop2.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="GridSplitter.Background" Color="{DynamicResource GridSplitter.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GridSplitter.PreviewStyle.Background" Color="{DynamicResource GridSplitter.PreviewStyle.Background.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="GridViewColumnHeaderGripper.Background.GradientStop1" Color="{DynamicResource GridViewColumnHeaderGripper.Background.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GridViewColumnHeaderGripper.Background.GradientStop2" Color="{DynamicResource GridViewColumnHeaderGripper.Background.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GridViewColumnHeaderGripper.Border.GradientStop1" Color="{DynamicResource GridViewColumnHeaderGripper.Border.GradientStop1.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GridViewColumnHeaderGripper.Border.GradientStop2" Color="{DynamicResource GridViewColumnHeaderGripper.Border.GradientStop2.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GridViewColumnHeaderGripper.Inner.Border" Color="{DynamicResource GridViewColumnHeaderGripper.Inner.Border.Color}" options:Freeze="True"/>
    
    <LinearGradientBrush x:Key="GridViewColumnHeader.Background" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Background.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Background.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GridViewColumnHeader.Border" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Border.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Border.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="GridViewColumnHeader.Disabled.Foreground" Color="{DynamicResource GridViewColumnHeader.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GridViewColumnHeader.Floating.Background" Color="{DynamicResource GridViewColumnHeader.Floating.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GridViewColumnHeader.Foreground" Color="{DynamicResource GridViewColumnHeader.Foreground.Color}" options:Freeze="True"/>
    <LinearGradientBrush x:Key="GridViewColumnHeader.MouseOver.Background" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
        <GradientStop Color="{DynamicResource GridViewColumnHeader.MouseOver.Background.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource GridViewColumnHeader.MouseOver.Background.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GridViewColumnHeader.MouseOver.Border" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
        <GradientStop Color="{DynamicResource GridViewColumnHeader.MouseOver.Border.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource GridViewColumnHeader.MouseOver.Border.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="GridViewColumnHeaderGripper.MouseOver.Lower.Border" Color="{DynamicResource GridViewColumnHeaderGripper.Border.GradientStop2.Color}" options:Freeze="True"/>
    <LinearGradientBrush x:Key="GridViewColumnHeader.Pressed.Background" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Pressed.Background.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Pressed.Background.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GridViewColumnHeader.Pressed.Border" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Pressed.Border.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource GridViewColumnHeader.Pressed.Border.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="GroupBox.Background" Color="{DynamicResource GroupBox.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GroupBox.Border" Color="{DynamicResource GroupBox.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GroupBox.Disabled.Background" Color="{DynamicResource GroupBox.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GroupBox.Disabled.Border" Color="{DynamicResource GroupBox.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GroupBox.Disabled.Foreground" Color="{DynamicResource GroupBox.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="GroupBox.Foreground" Color="{DynamicResource GroupBox.Foreground.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="Hyperlink.Disabled.Foreground" Color="{DynamicResource Hyperlink.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Hyperlink.Foreground" Color="{DynamicResource Hyperlink.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Hyperlink.MouseOver.Foreground" Color="{DynamicResource Hyperlink.MouseOver.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="Label.Background" Color="{DynamicResource Label.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Label.Foreground" Color="{DynamicResource Label.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Label.Disabled.Foreground" Color="{DynamicResource Label.Disabled.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ListBox.Background" Color="{DynamicResource ListBox.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBox.Border" Color="{DynamicResource ListBox.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="{DynamicResource ListBox.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="{DynamicResource ListBox.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBox.Foreground" Color="{DynamicResource ListBox.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Foreground" Color="{DynamicResource ListBox.Disabled.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ListBoxItem.MouseOver.Background" Color="{DynamicResource ListBoxItem.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBoxItem.MouseOver.Border" Color="{DynamicResource ListBoxItem.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBoxItem.SelectedActive.Background" Color="{DynamicResource ListBoxItem.SelectedActive.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBoxItem.SelectedActive.Border" Color="{DynamicResource ListBoxItem.SelectedActive.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBoxItem.SelectedActive.MouseOver.Background" Color="{DynamicResource ListBoxItem.SelectedActive.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBoxItem.SelectedActive.MouseOver.Border" Color="{DynamicResource ListBoxItem.SelectedActive.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBoxItem.SelectedInactive.Background" Color="{DynamicResource ListBoxItem.SelectedInactive.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListBoxItem.SelectedInactive.Border" Color="{DynamicResource ListBoxItem.SelectedInactive.Border.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ListView.Background" Color="{DynamicResource ListView.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListView.Border" Color="{DynamicResource ListView.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListView.Disabled.Background" Color="{DynamicResource ListView.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListView.Disabled.Border" Color="{DynamicResource ListView.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ListView.Foreground" Color="{DynamicResource ListView.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="{DynamicResource Item.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="{DynamicResource Item.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="{DynamicResource Item.SelectedActive.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="{DynamicResource Item.SelectedActive.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Item.SelectedActive.MouseOver.Background" Color="{DynamicResource Item.SelectedActive.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Item.SelectedActive.MouseOver.Border" Color="{DynamicResource Item.SelectedActive.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="{DynamicResource Item.SelectedInactive.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="{DynamicResource Item.SelectedInactive.Border.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="Menu.Background" Color="{DynamicResource Menu.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Menu.Border" Color="{DynamicResource Menu.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="{DynamicResource Menu.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Menu.Foreground" Color="{DynamicResource Menu.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Menu.Separator" Color="{DynamicResource Menu.Separator.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="MenuItem.Highlight.Background" Color="{DynamicResource MenuItem.Highlight.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="MenuItem.Highlight.Border" Color="{DynamicResource MenuItem.Highlight.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Background" Color="{DynamicResource MenuItem.Highlight.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="MenuItem.Highlight.Disabled.Border" Color="{DynamicResource MenuItem.Highlight.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="MenuItem.Selected.Background" Color="{DynamicResource MenuItem.Selected.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="MenuItem.Selected.Border" Color="{DynamicResource MenuItem.Selected.Border.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="MenuScrollButton.Background" Color="{DynamicResource MenuScrollButton.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="MenuScrollButton.Border" Color="{DynamicResource MenuScrollButton.Border.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="OptionMark.Background" Color="{DynamicResource OptionMark.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Border" Color="{DynamicResource OptionMark.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Foreground" Color="{DynamicResource OptionMark.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Glyph" Color="{DynamicResource OptionMark.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Root.Background" Color="{DynamicResource OptionMark.Root.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="{DynamicResource OptionMark.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="{DynamicResource OptionMark.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="{DynamicResource OptionMark.MouseOver.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="{DynamicResource OptionMark.Pressed.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="{DynamicResource OptionMark.Pressed.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="{DynamicResource OptionMark.Pressed.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="{DynamicResource OptionMark.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="{DynamicResource OptionMark.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Foreground" Color="{DynamicResource OptionMark.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="{DynamicResource OptionMark.Disabled.Glyph.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ProgressBar.Progress" Color="{DynamicResource ProgressBar.Progress.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ProgressBar.Background" Color="{DynamicResource ProgressBar.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ProgressBar.Border" Color="{DynamicResource ProgressBar.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ProgressBar.Disabled" Color="{DynamicResource ProgressBar.Disabled.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="RadioButton.Background" Color="{DynamicResource RadioButton.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Border" Color="{DynamicResource RadioButton.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Foreground" Color="{DynamicResource RadioButton.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Glyph" Color="{DynamicResource RadioButton.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="{DynamicResource RadioButton.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="{DynamicResource RadioButton.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="{DynamicResource RadioButton.MouseOver.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="{DynamicResource RadioButton.Pressed.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="{DynamicResource RadioButton.Pressed.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="{DynamicResource RadioButton.Pressed.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Root.Background" Color="{DynamicResource RadioButton.Root.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="{DynamicResource RadioButton.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="{DynamicResource RadioButton.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Foreground" Color="{DynamicResource RadioButton.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="{DynamicResource RadioButton.Disabled.Glyph.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="RepeatButton.Transparent.Background" Color="{DynamicResource RepeatButton.Transparent.Background.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ScrollBarButton.Background" Color="{DynamicResource ScrollBarButton.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBarButton.Border" Color="{DynamicResource ScrollBarButton.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBarButton.MouseOver.Background" Color="{DynamicResource ScrollBarButton.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBarButton.MouseOver.Border" Color="{DynamicResource ScrollBarButton.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBarButton.Pressed.Background" Color="{DynamicResource ScrollBarButton.Pressed.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBarButton.Pressed.Border" Color="{DynamicResource ScrollBarButton.Pressed.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBarButton.Disabled.Background" Color="{DynamicResource ScrollBarButton.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBarButton.Disabled.Border" Color="{DynamicResource ScrollBarButton.Disabled.Border.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ScrollBar.Background" Color="{DynamicResource ScrollBar.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Border" Color="{DynamicResource ScrollBar.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Foreground" Color="{DynamicResource ScrollBar.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Glyph" Color="{DynamicResource ScrollBar.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Thumb" Color="{DynamicResource ScrollBar.Thumb.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="{DynamicResource ScrollBar.MouseOver.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="{DynamicResource ScrollBar.MouseOver.Thumb.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="{DynamicResource ScrollBar.Pressed.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="{DynamicResource ScrollBar.Pressed.Thumb.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="{DynamicResource ScrollBar.Disabled.Glyph.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ScrollBar.Disabled.Thumb" Color="{DynamicResource ScrollBar.Disabled.Thumb.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="Separator.Background" Color="{DynamicResource Separator.Background.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="Slider.Background" Color="{DynamicResource Slider.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Slider.Border" Color="{DynamicResource Slider.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Slider.Disabled.Background" Color="{DynamicResource Slider.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Slider.SelectionRange.Background" Color="{DynamicResource Slider.SelectionRange.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Slider.IsKeyboardfocused.Foreground" Color="{DynamicResource Slider.IsKeyboardfocused.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="SliderThumb.Background" Color="{DynamicResource SliderThumb.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Border" Color="{DynamicResource SliderThumb.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Foreground" Color="{DynamicResource SliderThumb.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="{DynamicResource SliderThumb.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="{DynamicResource SliderThumb.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="{DynamicResource SliderThumb.Pressed.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="{DynamicResource SliderThumb.Pressed.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="{DynamicResource SliderThumb.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="{DynamicResource SliderThumb.Disabled.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="{DynamicResource SliderThumb.Track.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="{DynamicResource SliderThumb.Track.Border.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="StatusBar.Background" Color="{DynamicResource StatusBar.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="StatusBar.Foreground" Color="{DynamicResource StatusBar.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="StatusBarItem.Background" Color="{DynamicResource StatusBarItem.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="StatusBarItem.Border" Color="{DynamicResource StatusBarItem.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="StatusBarItem.Disabled.Foreground" Color="{DynamicResource StatusBarItem.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="StatusBarItem.Foreground" Color="{DynamicResource StatusBarItem.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="TabControl.Disabled.Foreground" Color="{DynamicResource TabControl.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TabControl.Foreground" Color="{DynamicResource TabControl.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TabControl.TabPanel.Background" Color="{DynamicResource TabControl.TabPanel.Background.Color}" options:Freeze="True"/>

    <SolidColorBrush x:Key="TabItem.Accent" Color="{DynamicResource TabItem.Accent.Color}" options:Freeze="True"/>
    <LinearGradientBrush x:Key="TabItem.Background" EndPoint="0,1" StartPoint="0,0" options:Freeze="True">
        <GradientStop Color="{DynamicResource TabItem.Background.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource TabItem.Background.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.Border" Color="{DynamicResource TabItem.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="{DynamicResource TabItem.Disabled.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="{DynamicResource TabItem.Disabled.Border.Color}" options:Freeze="True"/>
    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0" options:Freeze="True">
        <GradientStop Color="{DynamicResource TabItem.MouseOver.Background.GradientStop1.Color}" Offset="0.0"/>
        <GradientStop Color="{DynamicResource TabItem.MouseOver.Background.GradientStop2.Color}" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="{DynamicResource TabItem.MouseOver.Border.Color}"/>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="{DynamicResource TabItem.Selected.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="{DynamicResource TabItem.Selected.Border.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="TextBoxBase.Background" Color="{DynamicResource TextBoxBase.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TextBoxBase.Foreground" Color="{DynamicResource TextBoxBase.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TextBoxBase.InactiveSelection" Color="{DynamicResource TextBoxBase.InactiveSelection.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="{DynamicResource TextBox.Focus.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="{DynamicResource TextBox.MouseOver.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TextBox.Background" Color="{DynamicResource TextBox.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TextBox.Border" Color="{DynamicResource TextBox.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TextBox.ContentHost.Background" Color="{DynamicResource TextBox.ContentHost.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TextBox.Watermark" Color="{DynamicResource TextBox.Watermark.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ToolBarButtonHover" Color="{DynamicResource ToolBarButtonHover.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarMenuBorder" Color="{DynamicResource ToolBarMenuBorder.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarHorizontalOverflow.Path.Border" Color="{DynamicResource ToolBarHorizontalOverflow.Path.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarVerticalOverflow.Path.Border" Color="{DynamicResource ToolBarVerticalOverflow.Path.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="{DynamicResource ToolBarSubMenuBackground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarHorizontalBackground" Color="{DynamicResource ToolBarHorizontalBackground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarVerticalBackground" Color="{DynamicResource ToolBarVerticalBackground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarGripper" Color="{DynamicResource ToolBarGripper.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarToggleButtonHorizontalBackground" Color="{DynamicResource ToolBarToggleButtonHorizontalBackground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBarToggleButtonVerticalBackground" Color="{DynamicResource ToolBarToggleButtonVerticalBackground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ToolBar.Thumb.Background" Color="{DynamicResource ToolBar.Thumb.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBar.Thumb.GeometryDrawing" Color="{DynamicResource ToolBar.Thumb.GeometryDrawing.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolBar.Disabled.Foreground" Color="{DynamicResource ToolBar.Disabled.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ToolBarTrayBackground" Color="{DynamicResource ToolBarTray.Background.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="ToolTip.Background" Color="{DynamicResource ToolTip.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolTip.Border" Color="{DynamicResource ToolTip.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="ToolTip.Foreground" Color="{DynamicResource ToolTip.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="TreeView.Background" Color="{DynamicResource TreeView.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeView.Border" Color="{DynamicResource TreeView.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeView.Disabled.Foreground" Color="{DynamicResource TreeView.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeView.Foreground" Color="{DynamicResource TreeView.Foreground.Color}" options:Freeze="True"/>
    
    <SolidColorBrush x:Key="TreeViewItem.Background" Color="{DynamicResource TreeViewItem.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.Foreground" Color="{DynamicResource TreeViewItem.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.Disabled.Foreground" Color="{DynamicResource TreeViewItem.Disabled.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.Selected.Background" Color="{DynamicResource TreeViewItem.Selected.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.Selected.Foreground" Color="{DynamicResource TreeViewItem.Selected.Foreground.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Background" Color="{DynamicResource TreeViewItem.TreeArrow.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Border" Color="{DynamicResource TreeViewItem.TreeArrow.Border.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Checked.Background" Color="{DynamicResource TreeViewItem.TreeArrow.Checked.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Checked.Border" Color="{DynamicResource TreeViewItem.TreeArrow.Checked.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Background" Color="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Border" Color="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Background" Color="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Background.Color}" options:Freeze="True"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Border" Color="{DynamicResource TreeViewItem.TreeArrow.MouseOver.Checked.Background.Color}" options:Freeze="True"/>











    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                               DropShadowEffects                                                             |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <DropShadowEffect x:Key="DropShadowEffect" BlurRadius="3" Direction="315" Opacity="0.4" ShadowDepth="5" Color="{DynamicResource DropShadow.Color}" />









    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   Converters                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   Geometries                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>
    <Geometry x:Key="DownArrow">M 0,2 L 3.5,5.5 L 7,2 Z</Geometry>
    <Geometry x:Key="LeftArrow">M 0,3.5 L 3.5,0 L 3.5,7 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 0,7 L 3.5,3.5 Z</Geometry>
    <Geometry x:Key="UpArrow">M 0,5.5 L 3.5,2 L 7,5.5 Z</Geometry>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 Z"/>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                      Paths                                                                  |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Path x:Key="PathDownArrow" Margin="0,0,0,0" Stroke="{DynamicResource ArrowPath.Background}" Fill="{DynamicResource ArrowPath.Border}" Data="M 0,2 L 3.5,5.5 L 7,2 Z" SnapsToDevicePixels="True" />
    <Path x:Key="PathLeftArrow" Margin="10,0,0,0" Stroke="{DynamicResource ArrowPath.Background}" Fill="{DynamicResource ArrowPath.Border}" Data="M 0,3.5 L 3.5,0 L 3.5,7 Z" SnapsToDevicePixels="True" />
    <Path x:Key="PathRightArrow" Margin="20,0,0,0" Stroke="{DynamicResource ArrowPath.Background}" Fill="{DynamicResource ArrowPath.Border}" Data="M 0,0 L 0,7 L 3.5,3.5 Z" SnapsToDevicePixels="True" />
    <Path x:Key="PathUpArrow" Margin="30,0,0,0" Stroke="{DynamicResource ArrowPath.Background}" Fill="{DynamicResource ArrowPath.Border}" Data="M 0,5.5 L 3.5,2 L 7,5.5 Z" SnapsToDevicePixels="True" />











    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  Focus Visuals                                                              |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource FocusVisual.Stroke}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarDayButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="{DynamicResource CalendarButton.FocusVisual.Border}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" Stroke="{DynamicResource FocusVisual.Stroke}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="{DynamicResource FocusVisual.Stroke}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                       Menus                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightMenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource Menu.Background}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource Menu.Foreground}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>











    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    MenuItems                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Path x:Name="GlyphPanel" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" 
                      Fill="{DynamicResource Menu.Foreground}" Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
                <ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{DynamicResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Disabled.Border}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Path x:Name="GlyphPanel" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" Fill="{TemplateBinding Foreground}" 
                      Margin="3" VerticalAlignment="Center" Visibility="Collapsed"/>
                <ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                       Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" PlacementTarget="{Binding ElementName=templateRoot}">
                    <Border x:Name="SubMenuBorder" Background="{StaticResource Menu.Background}" BorderBrush="{StaticResource Menu.Border}" 
                            BorderThickness="1" Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer" 
                                      Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                               Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <Rectangle Fill="{StaticResource Menu.Separator}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{DynamicResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Border x:Name="GlyphPanel" Background="{DynamicResource MenuItem.Selected.Background}" BorderBrush="{DynamicResource MenuItem.Selected.Border}" 
                        BorderThickness="1" ClipToBounds="False" HorizontalAlignment="Center" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
                    <Path x:Name="Glyph" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource Menu.Foreground}" 
                          Height="11" Width="10"/>
                </Border>
                <ContentPresenter x:Name="menuHeaderContainer" ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" 
                                  Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  VerticalAlignment="Center">
                    <ContentPresenter.Resources>
                        <ResourceDictionary>
                            <Style TargetType="TextBlock">
                                <Setter Property="Margin" Value="0,0,20,0"/>
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="">
                                        <Setter Property="Margin" Value="0"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ResourceDictionary>
                    </ContentPresenter.Resources>
                </ContentPresenter>
                <TextBlock x:Name="menuGestureText" Grid.Column="4" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Disabled.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Disabled.Border}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" Height="22" SnapsToDevicePixels="true">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                <Border x:Name="GlyphPanel" Background="{DynamicResource MenuItem.Highlight.Background}" BorderBrush="{StaticResource MenuItem.Highlight.Border}" 
                        BorderThickness="1" Height="22" Margin="-1,0,0,0" VerticalAlignment="Center" Visibility="Hidden" Width="22">
                    <Path x:Name="Glyph" Data="{DynamicResource Checkmark}" FlowDirection="LeftToRight" Fill="{DynamicResource Menu.Foreground}" 
                          Height="11" Width="9"/>
                </Border>
                <ContentPresenter ContentSource="Header" Grid.Column="2" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center">
                    <ContentPresenter.Resources>
                        <ResourceDictionary>
                            <Style TargetType="TextBlock">
                                <Setter Property="Margin" Value="0,0,20,0"/>
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="">
                                        <Setter Property="Margin" Value="0"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ResourceDictionary>
                    </ContentPresenter.Resources>
                </ContentPresenter>
                <TextBlock x:Name="menuGestureText" Grid.Column="4" Opacity="0.7" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                <Path x:Name="RightArrow" Grid.Column="5" Data="{DynamicResource RightArrow}" Fill="{DynamicResource Menu.Foreground}" 
                      HorizontalAlignment="Left" Margin="10,0,0,0" VerticalAlignment="Center"/>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" 
                       IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" 
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3">
                    <Border x:Name="SubMenuBorder" Background="{DynamicResource Menu.Background}" BorderBrush="{DynamicResource Menu.Border}" 
                            BorderThickness="1" Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer" 
                                      Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" 
                                               Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <Rectangle Fill="{DynamicResource Menu.Separator}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Background}"/>
                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource MenuItem.Highlight.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource Menu.Disabled.Foreground}"/>
                <Setter Property="Fill" TargetName="RightArrow" Value="{DynamicResource Menu.Disabled.Foreground}"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="DarkThemeHighlightMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Foreground" Value="{DynamicResource Menu.Foreground}"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Background" Value="{DynamicResource Menu.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Menu.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource Menu.Foreground}"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                     Borders                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="0,0,11,0"/>
        <Setter Property="CornerRadius" Value="3,3,3,3"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                     Buttons                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Button.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource Button.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <Grid>
                            <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                                <Border.Effect>
                                    <BlurEffect Radius="5" KernelType="Gaussian"/>
                                </Border.Effect>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>                            
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>-->
                        <!--<Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>-->
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.IsDefault.Border}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="CalendarPreviousButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <Rectangle Fill="{StaticResource CalendarItem.HeaderButton.Rectangle.Background}" Opacity="1" Stretch="Fill"/>
            <Grid>
                <Path x:Name="previousPath" Data="M288.75,232.25 L288.75,240.625 L283,236.625 Z" 
                      Fill="{StaticResource CalendarItem.HeaderButton.Previous.Background}" 
                      HorizontalAlignment="Left" Height="10" Margin="14,-6,0,0" Stretch="Fill" 
                      VerticalAlignment="Center" Width="6"/>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".5" TargetName="previousPath"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{DynamicResource CalendarItem.HeaderButton.Background}" TargetName="previousPath"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="CalendarNextButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <Rectangle Fill="{DynamicResource CalendarItem.HeaderButton.Rectangle.Background}" Opacity="1" Stretch="Fill"/>
            <Grid>
                <Path x:Name="nextPath" Data="M282.875,231.875 L282.875,240.375 L288.625,236 Z" 
                      Fill="{DynamicResource CalendarItem.HeaderButton.Next.Background}" 
                      HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" 
                      VerticalAlignment="Center" Width="6"/>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".5" TargetName="nextPath"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{DynamicResource CalendarItem.HeaderButton.Background}" TargetName="nextPath"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="CalendarHeaderButtonTemplate" TargetType="{x:Type Button}">
        <Grid Cursor="Hand">
            <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" 
                              Content="{TemplateBinding Content}" 
                              TextElement.Foreground="{DynamicResource CalendarItem.HeaderButton.Foreground}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".5" TargetName="buttonContent"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextElement.Foreground" Value="{DynamicResource CalendarItem.HeaderButton.Background}" TargetName="buttonContent"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Button.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource Button.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.IsDefault.Border}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                      Thumbs                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{DynamicResource ToolBar.Thumb.Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush TileMode="Tile" ViewboxUnits="Absolute" Viewbox="0,0,4,4" ViewportUnits="Absolute" Viewport="0,0,4,4">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="{DynamicResource ToolBar.Thumb.GeometryDrawing}" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 Z"/>
                                            <GeometryDrawing Brush="{DynamicResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 Z"/>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 Z" 
                  Fill="{DynamicResource SliderThumb.Background}" Stroke="{DynamicResource SliderThumb.Border}" 
                  SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>            
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 Z" 
                  Fill="{DynamicResource SliderThumb.Background}" Stroke="{DynamicResource SliderThumb.Border}" 
                  SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 Z" 
                  Fill="{DynamicResource SliderThumb.Background}" Stroke="{DynamicResource SliderThumb.Border}" 
                  SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>    
    <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5 Z" Fill="{DynamicResource SliderThumb.Background}" 
                  Stroke="{DynamicResource SliderThumb.Border}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 Z" 
                  Fill="{DynamicResource SliderThumb.Background}" Stroke="{DynamicResource SliderThumb.Border}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 Z" 
                  Fill="{DynamicResource SliderThumb.Background}" Stroke="{DynamicResource SliderThumb.Border}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{DynamicResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ScrollBar.Thumb}" Height="{TemplateBinding Height}" 
                               SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.MouseOver.Thumb}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Pressed.Thumb}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Disabled.Thumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ScrollBar.Thumb}" Height="{TemplateBinding Height}" 
                               SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.MouseOver.Thumb}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Pressed.Thumb}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Disabled.Thumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="18"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="{DynamicResource GridViewColumnHeaderGripper.Background.GradientStop1.Color}" Offset="0.0"/>
                    <GradientStop Color="{DynamicResource GridViewColumnHeaderGripper.Background.GradientStop2.Color}" Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="{DynamicResource GridViewColumnHeaderGripper.Border.GradientStop1.Color}" Offset="0"/>
                    <GradientStop Color="{DynamicResource GridViewColumnHeaderGripper.Border.GradientStop2.Color}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{DynamicResource GridViewColumnHeaderGripper.Inner.Border}">
                        <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                     Calendars                                                               |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightCalendarStyle" TargetType="{x:Type Calendar}">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource Calendar.Foreground}"/>
        <Setter Property="CalendarButtonStyle" Value="{DynamicResource DarkThemeHighlightCalendarButtonStyle}" />
        <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource DarkThemeHighlightCalendarDayButtonStyle}" />
        <Setter Property="CalendarItemStyle" Value="{DynamicResource DarkThemeHighlightCalendarItemStyle}" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="{DynamicResource Calendar.Background.GradientStop1.Color}" Offset="0"/>
                    <GradientStop Color="{DynamicResource Calendar.Background.GradientStop2.Color}" Offset="0.16"/>
                    <GradientStop Color="{DynamicResource Calendar.Background.GradientStop3.Color}" Offset="0.16"/>
                    <GradientStop Color="{DynamicResource Calendar.Background.GradientStop4.Color}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="{DynamicResource Calendar.Border.GradientStop1.Color}" Offset="0"/>
                    <GradientStop Color="{DynamicResource Calendar.Border.GradientStop2.Color}" Offset="0.375"/>
                    <GradientStop Color="{DynamicResource Calendar.Border.GradientStop3.Color}" Offset="0.375"/>
                    <GradientStop Color="{DynamicResource Calendar.Border.GradientStop4.Color}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem x:Name="PART_CalendarItem" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                      BorderThickness="{TemplateBinding BorderThickness}" Style="{TemplateBinding CalendarItemStyle}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  CalendarButtons                                                            |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightCalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CalendarDayButtonFocusVisual}"/>
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.75"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.9"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="NormalText"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To=".35"
                                                         Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualState x:Name="NormalDay" />
                                <VisualState x:Name="BlackoutDay" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="TodayBackground" Fill="{DynamicResource CalendarDayButton.Today.Background}" Opacity="0" 
                                   RadiusX="1" RadiusY="1"/>
                        <Rectangle x:Name="SelectedBackground" Fill="{DynamicResource CalendarDayButton.Today.Selected.Background}" 
                                   Opacity="0" RadiusX="1" RadiusY="1"/>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Rectangle x:Name="HighlightBackground" Fill="{DynamicResource CalendarDayButton.Today.Highlight.Background}" 
                                   Opacity="0" RadiusX="1" RadiusY="1"/>
                        <ContentPresenter x:Name="NormalText" TextElement.Foreground="{TemplateBinding Foreground}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,1,5,1" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Path x:Name="Blackout" Fill="{DynamicResource CalendarDayButton.Blackout.Background}" HorizontalAlignment="Stretch" 
                              Margin="3" Opacity="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch"
                              Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 Z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInactive" Value="True">
                            <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource CalendarDayButton.Inactive.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource CalendarButton.Foreground}" />
                            <Setter TargetName="SelectedBackground" Property="Opacity" Value=".7" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}, Path=IsTodayHighlighted, FallbackValue=True}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsToday, FallbackValue=False}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected, FallbackValue=False}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource CalendarDayButton.Today.Foreground}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}, Path=IsTodayHighlighted, FallbackValue=True}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsToday, FallbackValue=False}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource CalendarButton.Foreground}" />
                            <Setter TargetName="TodayBackground" Property="Opacity" Value="1" />
                        </MultiDataTrigger>
                        <Trigger Property="IsBlackedOut" Value="True">
                            <Setter TargetName="Blackout" Property="Opacity" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsToday" Value="True" />
                                <Condition Property="IsBlackedOut" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Blackout" Property="Fill" Value="{DynamicResource CalendarButton.Foreground}" />
                            <Setter TargetName="TodayBackground" Property="Opacity" Value="0.5" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DarkThemeHighlightCalendarButtonStyle" TargetType="{x:Type CalendarButton}">
        <Setter Property="Background" Value="{DynamicResource CalendarButton.Background}"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="MinHeight" Value="42"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Background" To=".5" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Background" To=".5" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="SelectedBackground" To=".75" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active"/>
                                <VisualState x:Name="Inactive" />
                                <!--<VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" To="{DynamicResource CalendarButton.Inactive.Foreground.Color}" 
                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </VisualState>-->
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="CalendarButtonFocusVisual" 
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="CalendarButtonFocusVisual" 
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="SelectedBackground" Fill="{TemplateBinding Background}" Opacity="0" RadiusX="1" RadiusY="1"/>
                        <Rectangle x:Name="Background" Fill="{TemplateBinding Background}" Opacity="0" RadiusX="1" RadiusY="1"/>
                        <ContentPresenter x:Name="NormalText" TextElement.Foreground="{DynamicResource CalendarButton.Foreground}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,0,1,1" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Rectangle x:Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusX="1" RadiusY="1" 
                                   Stroke="{DynamicResource CalendarButton.FocusVisual.Border}" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="CalendarButtonFocusVisual" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   CalendarItems                                                             |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightCalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0,3,0,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock Foreground="{DynamicResource Calendar.Foreground}" FontFamily="Verdana" FontWeight="Bold" 
                                       FontSize="9.5" HorizontalAlignment="Center" 
                                       Margin="0,6,0,6" Text="{Binding}" VerticalAlignment="Center"/>
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_DisabledVisual" To="1" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-2" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1">
                            <Border BorderBrush="{DynamicResource CalendarItem.Inner.Border}" BorderThickness="2" CornerRadius="1">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" 
                                            Grid.Row="0" Template="{DynamicResource CalendarPreviousButtonTemplate}" Width="28"/>
                                    <Button x:Name="PART_HeaderButton" Grid.Column="1" Focusable="False" FontWeight="Bold" FontSize="10.5" 
                                            HorizontalAlignment="Center" Grid.Row="0" Template="{DynamicResource CalendarHeaderButtonTemplate}" 
                                            VerticalAlignment="Center"/>
                                    <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" 
                                            Grid.Row="0" Template="{DynamicResource CalendarNextButtonTemplate}" Width="28"/>
                                    <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-1,6,6" 
                                          Grid.Row="1" Visibility="Visible">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                    </Grid>
                                    <Grid x:Name="PART_YearView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,-3,7,6" 
                                          Grid.Row="1" Visibility="Hidden">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                    </Grid>
                                </Grid>
                            </Border>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Fill="{DynamicResource CalendarItem.Root.Disabled.Background}" Opacity="0" RadiusX="2" RadiusY="2" 
                                   Stroke="{DynamicResource CalendarItem.Root.Disabled.Background}" Stretch="Fill" StrokeThickness="1" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                     CheckBoxes                                                              |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource OptionMark.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OptionMark.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource OptionMark.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="{DynamicResource OptionMark.Root.Background}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-2" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="checkBoxBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z" 
                                      Fill="{DynamicResource OptionMark.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource OptionMark.Glyph}" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource OptionMark.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource OptionMark.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource OptionMark.MouseOver.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource OptionMark.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource OptionMark.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource OptionMark.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource OptionMark.Disabled.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource OptionMark.Disabled.Glyph}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource OptionMark.Disabled.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource OptionMark.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource OptionMark.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource OptionMark.Pressed.Glyph}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource OptionMark.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    ToggleButtons                                                            |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ToolBarToggleButtonHorizontalBackground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,3,3,0" SnapsToDevicePixels="True">
                        <Canvas HorizontalAlignment="Right" Height="7" Margin="7,2,2,2" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="6">
                            <Path Data="M 1 1.5 L 6 1.5" Stroke="{DynamicResource ToolBarHorizontalOverflow.Path.Border}" SnapsToDevicePixels="True"/>
                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="{DynamicResource ToolBarHorizontalOverflow.Path.Border}" SnapsToDevicePixels="True"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ToolBarGripper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ToolBarToggleButtonVerticalBackground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,0,3,3" SnapsToDevicePixels="true">
                        <Canvas HorizontalAlignment="Right" Height="6" Margin="2,7,2,2" SnapsToDevicePixels="true" VerticalAlignment="Bottom" Width="7">
                            <Path Data="M 1.5 1 L 1.5 6" Stroke="{DynamicResource ToolBarVerticalOverflow.Path.Border}"/>
                            <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
                            <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="{DynamicResource ToolBarVerticalOverflow.Path.Border}"/>
                            <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ToolBarGripper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{DynamicResource Expander.Circle.Fill}" HorizontalAlignment="Center" Height="19" 
                                     Stroke="{DynamicResource Expander.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" 
                                  Stroke="{DynamicResource Expander.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" 
                                  VerticalAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" 
                                              VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource Expander.Circle.Fill}" HorizontalAlignment="Center" Height="19" 
                                         Stroke="{DynamicResource Expander.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" 
                                      Stroke="{DynamicResource Expander.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" 
                                      VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" 
                                              VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource Expander.Circle.Fill}" HorizontalAlignment="Center" Height="19" 
                                         Stroke="{DynamicResource Expander.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" 
                                      Stroke="{DynamicResource Expander.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" 
                                      VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" 
                                              VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{DynamicResource Expander.Circle.Fill}" HorizontalAlignment="Center" Height="19" 
                                         Stroke="{DynamicResource Expander.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" 
                                      Stroke="{DynamicResource Expander.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" 
                                      VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" 
                                              VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{DynamicResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Background}" 
                                  Stroke="{StaticResource TreeViewItem.TreeArrow.Border}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Checked.Background}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Checked.Border}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Background}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Background}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Border}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    TextBoxBases                                                             |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource TextBoxBase.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxBase.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ContextMenu" Value="{DynamicResource DarkThemeHighlightTextBoxContextMenuStyle}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                    </Grid>                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.Focus.Border}"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource TextBoxBase.InactiveSelection}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                      TextBoxes                                                              |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource TextBoxBase.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxBase.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ContextMenu" Value="{DynamicResource DarkThemeHighlightTextBoxContextMenuStyle}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>        
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="MinHeight" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"/>
                        </Border>                        
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.Focus.Border}"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource TextBoxBase.InactiveSelection}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                 PasswordBoxes                                                               |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightPasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Background" Value="{DynamicResource TextBoxBase.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxBase.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ContextMenu" Value="{DynamicResource DarkThemeHighlightTextBoxContextMenuStyle}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="MinHeight" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                    </Grid>                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.Focus.Border}"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource TextBoxBase.InactiveSelection}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                              DatePickerTextBoxes                                                            |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightDatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Background" Value="{DynamicResource TextBoxBase.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxBase.Foreground}"/>
        <Setter Property="ContextMenu" Value="{DynamicResource DarkThemeHighlightTextBoxContextMenuStyle}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="{DynamicResource TextBox.Watermark.Color}"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="ContentElement" To="{DynamicResource TextBox.MouseOver.Border.Color}" 
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="watermark_decorator" To="{DynamicResource TextBox.MouseOver.Border.Color}" 
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="ContentElement" To="0" Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Watermark" To="1" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisual" To="1" Storyboard.TargetProperty="Opacity"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="ContentElement" To="{DynamicResource TextBox.Focus.Border.Color}" 
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="watermark_decorator" To="{DynamicResource TextBox.Focus.Border.Color}" 
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="1" 
                                Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderBrush="{DynamicResource TextBox.Border}" BorderThickness="1"/>
                                <Border x:Name="watermark_decorator" BorderBrush="{DynamicResource TextBox.Border}" BorderThickness="1">
                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Border x:Name="FocusVisual" BorderBrush="{DynamicResource TextBox.Focus.Border}" CornerRadius="1" 
                                        IsHitTestVisible="False" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>                
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                     ComboBoxes                                                              |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" Margin="1" Placement="Bottom"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Border x:Name="dropDownBorder" BorderThickness="1"
                                    Background="{DynamicResource ComboBox.DropDown.Background}" 
                                    BorderBrush="{DynamicResource ComboBox.DropDown.Border}" 
                                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}" 
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" 
                                                       Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                                       Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" 
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <Border x:Name="highlightBorder" Grid.Column="0" Grid.ColumnSpan="2" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                      BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Style>
                                <Style TargetType="ToggleButton">
                                    <Setter Property="OverridesDefaultStyle" Value="true"/>
                                    <Setter Property="IsTabStop" Value="false"/>
                                    <Setter Property="Focusable" Value="false"/>
                                    <Setter Property="ClickMode" Value="Press"/>
                                    <Setter Property="MinHeight" Value="22"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border x:Name="templateRoot" 
                                                        Background="{TemplateBinding Background}" 
                                                        BorderBrush="{TemplateBinding BorderBrush}" 
                                                        BorderThickness="{TemplateBinding BorderThickness}" 
                                                        SnapsToDevicePixels="true">
                                                    <Border x:Name="splitBorder"
                                                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,0,0" HorizontalAlignment="Right" Margin="0" 
                                                            SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                        <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" 
                                                              Fill="{DynamicResource ComboBox.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Fill" Value="{DynamicResource ComboBox.Disabled.Glyph}" TargetName="arrow"/>
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=IsEditable}" Value="False">
                                                        <Setter Property="BorderThickness" Value="0" TargetName="splitBorder"/>
                                                    </DataTrigger>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=IsEditable}" Value="False"/>
                                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="BorderThickness" Value="0" TargetName="splitBorder"/>
                                                        <Setter Property="Fill" Value="{DynamicResource ComboBox.Disabled.Glyph}" TargetName="arrow"/>
                                                    </MultiDataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Visibility="Collapsed">
                            <ContentPresenter.Style>
                                <Style TargetType="ContentPresenter">
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="TextElement.Foreground" Value="{DynamicResource ComboBox.Disabled.Foreground}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Style>
                        </ContentPresenter>
                        <TextBox x:Name="PART_EditableTextBox" CaretBrush="{DynamicResource ComboBox.Foreground}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" 
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" ContextMenu="{DynamicResource DarkThemeHighlightTextBoxContextMenuStyle}"
                                 Visibility="Collapsed">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Setter Property="OverridesDefaultStyle" Value="true"/>
                                    <Setter Property="AllowDrop" Value="true"/>
                                    <Setter Property="MinWidth" Value="0"/>
                                    <Setter Property="MinHeight" Value="0"/>
                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                <ScrollViewer x:Name="PART_ContentHost" Background="{DynamicResource ComboBox.Editable.Background}" 
                                                              Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" TargetName="PART_ContentHost" Value="{DynamicResource ComboBox.Disabled.Editable.Background}"/>
                                                        <Setter Property="BorderBrush" TargetName="PART_ContentHost" Value="{DynamicResource ComboBox.Disabled.Editable.Background}"/>
                                                        <Setter Property="TextElement.Foreground" Value="{DynamicResource ComboBox.Disabled.Foreground}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" TargetName="PART_ContentHost" Value="{DynamicResource ComboBox.MouseOver.Editable.Background}"/>
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Background" TargetName="PART_ContentHost" Value="{DynamicResource ComboBox.MouseOver.Editable.Background}"/>
                                                    </DataTrigger>
                                                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                                        <Setter Property="Background" TargetName="PART_ContentHost" Value="{DynamicResource ComboBox.MouseOver.Editable.Background}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="toggleButton" Value="{DynamicResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="toggleButton" Value="{DynamicResource ComboBox.Disabled.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" TargetName="toggleButton" Value="{DynamicResource ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="toggleButton" Value="{DynamicResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ComboBox.MouseOver.Background}" TargetName="toggleButton"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.MouseOver.Border}" TargetName="toggleButton"/>
                            <Setter Property="Background" Value="{DynamicResource ComboBox.MouseOver.Background}" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="contentPresenter"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="contentPresenter"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter Property="Effect" TargetName="dropDownBorder" Value="{DynamicResource DropShadowEffect}"/>
                            <Setter Property="Margin" TargetName="dropDownBorder" Value="0,0,5,5"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    ComboBoxItems                                                            |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="{DynamicResource ComboBoxItem.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxItem.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ComboBoxItem.Disabled.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ComboBoxItem.ItemsviewHover.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ComboBoxItem.ItemsviewHover.Border}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ComboBoxItem.ItemsviewSelected.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ComboBoxItem.ItemsviewSelected.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ComboBoxItem.ItemsviewSelectedHover.Border}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  ContentControls                                                            |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightContentControlStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    ContextMenus                                                             |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightContextMenuStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource ContextMenu.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ContextMenu.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource ContextMenu.Foreground}" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="PopupBorder" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="True"
                                          Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid>
                                <Rectangle RadiusX="2" RadiusY="2" Fill="{DynamicResource ContextMenu.Background}" Width="28" Margin="1,2,1,2" HorizontalAlignment="Left" />
                                <Rectangle Fill="{DynamicResource ContextMenu.Splitter.Color1}" Width="1" Margin="29,2,0,2" HorizontalAlignment="Left" />
                                <Rectangle Fill="{DynamicResource ContextMenu.Splitter.Color2}" Width="1" Margin="30,2,0,2" HorizontalAlignment="Left" />
                                <ItemsPresenter x:Name="ItemsPresenter" Margin="0"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter Property="Effect" TargetName="PopupBorder" Value="{DynamicResource DropShadowEffect}"/>
                            <Setter Property="Margin" TargetName="PopupBorder" Value="0,0,5,5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ContextMenu x:Key="DarkThemeHighlightTextBoxContextMenuStyle" x:Shared="False" Style="{DynamicResource DarkThemeHighlightContextMenuStyle}">
        <MenuItem Command="ApplicationCommands.Cut" Style="{DynamicResource DarkThemeHighlightMenuItemStyle}" />
        <MenuItem Command="ApplicationCommands.Copy" Style="{DynamicResource DarkThemeHighlightMenuItemStyle}" />
        <MenuItem Command="ApplicationCommands.Paste" Style="{DynamicResource DarkThemeHighlightMenuItemStyle}" />
    </ContextMenu>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   DatePickers                                                               |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightDatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="CalendarStyle" Value="{DynamicResource DarkThemeHighlightCalendarStyle}"/>
        <Setter Property="Foreground" Value="{DynamicResource DatePicker.Foreground}"/>
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Background" Value="{DynamicResource DatePicker.Background}"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint=".5,0" StartPoint=".5,1">
                    <GradientStop Color="{DynamicResource DatePicker.Border.GradientStop1.Color}" Offset="0"/>
                    <GradientStop Color="{DynamicResource DatePicker.Border.GradientStop2.Color}" Offset="0.375"/>
                    <GradientStop Color="{DynamicResource DatePicker.Border.GradientStop3.Color}" Offset="0.375"/>
                    <GradientStop Color="{DynamicResource DatePicker.Border.GradientStop4.Color}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Grid>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" Storyboard.TargetName="PART_DisabledVisual" To="1" Storyboard.TargetProperty="Opacity"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.Resources>
                                    <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                        <Grid>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition GeneratedDuration="0"/>
                                                        <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                                        <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed"/>
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState x:Name="Normal"/>
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" Storyboard.TargetName="Background" To="#FF448DCA" 
                                                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"/>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Border.MouseOver.GradientStop4.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Border.MouseOver.GradientStop3.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Border.MouseOver.GradientStop2.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Pressed">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Background" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Background.Pressed.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Highlight" 
                                                                                           Storyboard.TargetProperty="(UIElement.Opacity)">
                                                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Border.Pressed.GradientStop2.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Border.Pressed.GradientStop3.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Border.Pressed.GradientStop4.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" 
                                                                                          Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="{DynamicResource DatePicker.Border.Pressed.GradientStop1.Color}"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled"/>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Grid Background="{DynamicResource DatePicker.Inner.Background}" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0" 
                                                  VerticalAlignment="Center" Width="19">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="23*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                </Grid.RowDefinitions>
                                                <Border x:Name="Highlight" BorderBrush="{DynamicResource DatePicker.Inner.Highlight}" BorderThickness="1" 
                                                        CornerRadius="0,0,1,1" Grid.ColumnSpan="4" Margin="-1" Opacity="0" Grid.RowSpan="4" Grid.Row="0"/>
                                                <Border x:Name="Background" BorderThickness="1" CornerRadius=".5" Grid.ColumnSpan="4" Margin="0,-1,0,0" 
                                                        Opacity="1" Grid.RowSpan="3" Grid.Row="1"
                                                        Background="{DynamicResource DatePicker.Inner.Inner.Background}" BorderBrush="{DynamicResource DatePicker.Inner.Inner.Border}"/>
                                                <Border x:Name="BackgroundGradient" BorderBrush="{DynamicResource DatePicker.Inner.Background.Gradient.Border}" 
                                                        BorderThickness="1" CornerRadius=".5" Grid.ColumnSpan="4" Margin="0,-1,0,0" Opacity="1" Grid.RowSpan="3" Grid.Row="1">
                                                    <Border.Background>
                                                        <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Background.GradientStop1.Color}" Offset="0"/>
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Background.GradientStop2.Color}" Offset="0.375"/>
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Background.GradientStop3.Color}" Offset="0.625"/>
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Background.GradientStop4.Color}" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Rectangle.Background.GradientStop1.Color}"/>
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Rectangle.Background.GradientStop2.Color}" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                    <Rectangle.Stroke>
                                                        <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Rectangle.Border.GradientStop1.Color}"/>
                                                            <GradientStop Color="{DynamicResource DatePicker.Inner.Rectangle.Border.GradientStop1.Color}" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Stroke>
                                                </Rectangle>
                                                <Path Grid.Column="0" Grid.ColumnSpan="4" Fill="{DynamicResource DatePicker.Calendar.Foreground}" 
                                                      HorizontalAlignment="Center" Margin="4,3,4,3" 
                                                      RenderTransformOrigin="0.5,0.5" Grid.RowSpan="3" Grid.Row="1" Stretch="Fill" VerticalAlignment="Center"
                                                      Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 Z"/>
                                                <Ellipse Grid.ColumnSpan="4" Fill="{DynamicResource DatePicker.Calendar.Circle.Background}" 
                                                         HorizontalAlignment="Center" Height="3" StrokeThickness="0" 
                                                         VerticalAlignment="Center" Width="3"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="False" 
                                        HorizontalAlignment="Left" Margin="3,0,3,0" Grid.Row="0" Template="{DynamicResource DropDownButtonTemplate}" 
                                        VerticalAlignment="Top" Width="20"/>
                                <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}" 
                                                   HorizontalContentAlignment="Stretch" Grid.Row="0" VerticalContentAlignment="Stretch"
                                                   Style="{DynamicResource DarkThemeHighlightDatePickerTextBoxStyle}"/>
                                <Grid x:Name="PART_DisabledVisual" Grid.Column="0" Grid.ColumnSpan="2" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                    <Rectangle Fill="{DynamicResource DatePicker.Disabled.Background}" />
                                </Grid>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    Expanders                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource Expander.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Expander.Background}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Expander.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                          Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                          DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" 
                                          FocusVisualStyle="{DynamicResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" 
                                          FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Margin="0" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{DynamicResource ExpanderDownHeaderStyle}" 
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{DynamicResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{DynamicResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{DynamicResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Expander.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  GridSplitters                                                              |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="GridSplitterPreviewStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="{DynamicResource GridSplitter.PreviewStyle.Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DarkThemeHighlightGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource GridSplitter.Background}"/>
        <Setter Property="PreviewStyle" Value="{DynamicResource GridSplitterPreviewStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   GroupBoxes                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Background" Value="{DynamicResource GroupBox.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource GroupBox.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource GroupBox.Foreground}" />
        <Setter Property="Padding" Value="5,3" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border x:Name="headerBorder" Background="{TemplateBinding BorderBrush}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1" CornerRadius="0" Grid.Row="0">
                            <ContentPresenter x:Name="header" Content="{TemplateBinding Header}" Margin="{TemplateBinding Padding}"
                                              TextElement.Foreground="{TemplateBinding Foreground}"/>
                        </Border>
                        <Border x:Name="contentBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1" Grid.Row="1">
                            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" 
                                              TextElement.Foreground="{DynamicResource GroupBox.Foreground}"/>
                        </Border>
                        <Rectangle x:Name="disabledRect" Fill="{DynamicResource GroupBox.Disabled.Background}" Visibility="Collapsed"
                                   Grid.Row="0" Grid.RowSpan="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="disabledRect" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>









    
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   Hyperlink                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightHyperlinkStyle" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource Hyperlink.Foreground}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource Hyperlink.MouseOver.Foreground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource Hyperlink.Disabled.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                     Labels                                                                  |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource Label.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Label.Background}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Label.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   ListBoxes                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource ListBox.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ListBox.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ListBox.Foreground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="sv" Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListBox.Disabled.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                 ListBoxItems                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListBoxItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListBoxItem.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListBoxItem.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListBoxItem.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ListBoxItem.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource ListBoxItem.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBoxItem.SelectedActive.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBoxItem.SelectedActive.MouseOver.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource ListBox.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>











    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                             GridViewColumnHeaders                                                           |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightGridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Foreground" Value="{DynamicResource GridViewColumnHeader.Foreground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <Border x:Name="HeaderBorder" BorderThickness="0,1,0,1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True"
                                Background="{DynamicResource GridViewColumnHeader.Background}" BorderBrush="{DynamicResource GridViewColumnHeader.Border}">
                            <ContentPresenter x:Name="HeaderContent" Margin="0,0,0,4" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <Border x:Name="BottomHeaderBorder" VerticalAlignment="Bottom" Height="1" BorderThickness="0,0,0,1" SnapsToDevicePixels="True"
                                BorderBrush="{DynamicResource GridViewColumnHeaderGripper.MouseOver.Lower.Border}"/>
                        <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-9,0" Style="{StaticResource GridViewColumnHeaderGripper}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{DynamicResource GridViewColumnHeader.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource GridViewColumnHeader.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="HeaderBorder" Value="{DynamicResource GridViewColumnHeader.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="HeaderBorder" Value="{DynamicResource GridViewColumnHeader.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource GridViewColumnHeader.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="Floating">
                <Setter Property="Opacity" Value="0.7" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Canvas Name="PART_FloatingHeaderCanvas">
                                <Rectangle Fill="{DynamicResource GridViewColumnHeader.Floating.Background}" SnapsToDevicePixels="True"
                                           Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"/>
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role" Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Grid>
                                <Border Name="HeaderBorder" BorderThickness="0,1,0,1" Background="{DynamicResource GridViewColumnHeader.Background}"
                                        BorderBrush="{DynamicResource GridViewColumnHeader.Border}" SnapsToDevicePixels="True">
                                </Border>
                                <Border x:Name="BottomHeaderBorder" VerticalAlignment="Bottom" Height="1" BorderThickness="0,0,0,1" SnapsToDevicePixels="True"
                                        BorderBrush="{DynamicResource GridViewColumnHeaderGripper.MouseOver.Lower.Border}"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                   ListViews                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource ListView.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ListView.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource ListView.Foreground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Style="{DynamicResource DarkThemeHighlightScrollViewGridView}" 
                                          CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListView.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListView.Disabled.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                 ListViewItems                                                               |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid Margin="{TemplateBinding BorderThickness}">
                            <GridViewRowPresenter x:Name="RowPresenter"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            <ContentPresenter x:Name="ContentPresenter"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="ContentPresenter" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RowPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.MouseOver.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                 ProgressBars                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightProgressBarStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource ProgressBar.Progress}"/>
        <Setter Property="Background" Value="{DynamicResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ProgressBar.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" 
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                        <Rectangle x:Name="DisabledOverlay" Fill="{DynamicResource ProgressBar.Disabled}" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" Value="Visible" TargetName="DisabledOverlay"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                 RadioButtons                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource RadioButton.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource RadioButton.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource RadioButton.Foreground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="{DynamicResource RadioButton.Root.Background}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="1" Visibility="Collapsed" CornerRadius="100">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="radioButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="100" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="3,2,3,2" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{DynamicResource RadioButton.Glyph}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.MouseOver.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.MouseOver.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Disabled.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.Disabled.Glyph}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource RadioButton.Disabled.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource RadioButton.Pressed.Border}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource RadioButton.Pressed.Glyph}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  RichTextBox                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightRichTextBoxStyle" TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
            </Style>
            <!-- even though we have a global we still need to set this Hyperlink style on the RichTextBox for it to show (a copy of the global Hyperlink style) -->
            <Style x:Key="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                <Setter Property="Foreground" Value="{DynamicResource Hyperlink.Foreground}"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="{DynamicResource Hyperlink.MouseOver.Foreground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource Hyperlink.Disabled.Foreground}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" Value="10"/>
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TextBoxBase}"/>
        </Style.BasedOn>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                 RepeatButtons                                                               |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource RepeatButton.Transparent.Background}"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuScrollButton" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="templateRoot" BorderThickness="1" SnapsToDevicePixels="true"
                            Background="{DynamicResource MenuScrollButton.Background}" BorderBrush="{DynamicResource MenuScrollButton.Background}">
                        <ContentPresenter HorizontalAlignment="Center" Margin="6" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border" Background="{DynamicResource ScrollBarButton.Background}" 
                            BorderBrush="{DynamicResource ScrollBarButton.Border}" BorderThickness="1" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ScrollBarButton.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ScrollBarButton.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ScrollBarButton.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ScrollBarButton.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ScrollBarButton.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ScrollBarButton.Disabled.Border}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  ScrollBars                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{DynamicResource ScrollBar.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ScrollBar.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource ScrollBar.Foreground}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                Grid.Row="1"/>
                        <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}"
                                      Style="{DynamicResource ScrollBarButton}">
                            <Path x:Name="ArrowTop" Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 Z" 
                                  Fill="{DynamicResource ScrollBar.Glyph}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" Grid.Row="1" Margin="2,0">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{DynamicResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{DynamicResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" Grid.Row="2" 
                                      Style="{DynamicResource ScrollBarButton}">
                            <Path x:Name="ArrowBottom" Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 Z" 
                                  Fill="{DynamicResource ScrollBar.Glyph}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ScrollBar.Pressed.Glyph}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ScrollBar.Pressed.Glyph}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ScrollBar.MouseOver.Glyph}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ScrollBar.MouseOver.Glyph}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ScrollBar.Disabled.Glyph}"/>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ScrollBar.Disabled.Glyph}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="BorderThickness" Value="0,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                        BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="1"/>
                                <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}"
                                              Style="{DynamicResource ScrollBarButton}">
                                    <Path x:Name="ArrowLeft" Fill="{DynamicResource ScrollBar.Glyph}" Margin="3" Stretch="Uniform"
                                          Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 Z"/>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" Margin="0,2">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{DynamicResource RepeatButtonTransparent}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{DynamicResource RepeatButtonTransparent}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource ScrollBarThumbHorizontal}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Command="{x:Static ScrollBar.LineRightCommand}" Grid.Column="2" 
                                              Style="{DynamicResource ScrollBarButton}">
                                    <Path x:Name="ArrowRight" Fill="{DynamicResource ScrollBar.Glyph}" Margin="3" Stretch="Uniform"
                                          Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 Z" />
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ScrollBar.Pressed.Glyph}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ScrollBar.Pressed.Glyph}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ScrollBar.MouseOver.Glyph}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ScrollBar.MouseOver.Glyph}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ScrollBar.Disabled.Glyph}"/>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ScrollBar.Disabled.Glyph}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                ScrollViewers                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="{ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}" BasedOn="{x:Null}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" Grid.Row="1" BorderBrush="Transparent" BorderThickness="0">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" 
                                      Grid.Column="0" Focusable="false" Grid.Row="0" Style="{DynamicResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{DynamicResource UpArrow}" Fill="{DynamicResource Menu.Foreground}"/>
                        </RepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" 
                                      Grid.Column="0" Focusable="false" Grid.Row="2" Style="{DynamicResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{DynamicResource DownArrow}" Fill="{DynamicResource Menu.Foreground}"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DarkThemeHighlightScrollViewGridView" BasedOn="{StaticResource {x:Static GridView.GridViewScrollViewerStyleKey}}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="false">
                                <GridViewHeaderRowPresenter x:Name="PART_HeaderRowPresenter" Margin="0"
                                                            Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"/>
                        </DockPanel>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1"
                                   Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"
                                   Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="PART_HeaderRowPresenter" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DarkThemeHighlightScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="leftColumn" Width="*"/>
                            <ColumnDefinition x:Name="rightColumn" Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Grid.RowSpan="2">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0"
                                                Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}"
                                                CanHorizontallyScroll="False" CanVerticallyScroll="False"
                                                Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" Cursor="Arrow" Minimum="0"
                                   Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" Cursor="Arrow" Minimum="0" Orientation="Horizontal"
                                   Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  Separators                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource Separator.Background}"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Height="1" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    Sliders                                                                  |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                <Border x:Name="TrackBackground" Background="{DynamicResource SliderThumb.Track.Background}" BorderBrush="{DynamicResource SliderThumb.Track.Border}" 
                        BorderThickness="1" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource Slider.SelectionRange.Background}" Height="4.0" Visibility="Hidden"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{DynamicResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{DynamicResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{DynamicResource SliderThumbHorizontalDefault}"
                               VerticalAlignment="Center" Width="11"/>
                    </Track.Thumb>
                </Track>
                <Rectangle x:Name="DisabledOverlay" Fill="{DynamicResource Slider.Disabled.Background}" Visibility="Collapsed"  Grid.RowSpan="3"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbHorizontalTop}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbHorizontalBottom}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="{DynamicResource Slider.IsKeyboardfocused.Foreground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Visible" TargetName="DisabledOverlay"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                <Border x:Name="TrackBackground" Background="{DynamicResource SliderThumb.Track.Background}" 
                        BorderBrush="{DynamicResource SliderThumb.Track.Border}" BorderThickness="1" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource Slider.SelectionRange.Background}" Visibility="Hidden" Width="4.0" Height="2"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{DynamicResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{DynamicResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" 
                               Template="{DynamicResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18"/>
                    </Track.Thumb>
                </Track>
                <Rectangle x:Name="DisabledOverlay" Fill="{DynamicResource Slider.Disabled.Background}" Visibility="Collapsed" Grid.ColumnSpan="3"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbVerticalLeft}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{DynamicResource SliderThumbVerticalRight}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="{DynamicResource Slider.IsKeyboardfocused.Foreground}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Visible" TargetName="DisabledOverlay"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="DarkThemeHighlightSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Background" Value="{DynamicResource Slider.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Slider.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource SliderThumb.Foreground}"/>
        <Setter Property="Template" Value="{DynamicResource SliderHorizontal}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{DynamicResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  StatusBars                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightStatusBarStyle" TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="{DynamicResource StatusBar.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource StatusBar.Foreground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                StatusBarItems                                                               |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightStatusBarItemStyle" TargetType="{x:Type StatusBarItem}">
        <Setter Property="Background" Value="{DynamicResource StatusBarItem.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource StatusBarItem.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource StatusBarItem.Foreground}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource StatusBarItem.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  TabControls                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource TabItem.Selected.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TabItem.Selected.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource TabControl.Foreground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" Background="{DynamicResource TabControl.TabPanel.Background}" Grid.Column="0" IsItemsHost="true" Margin="2,2,2,2" 
                                  Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" TextElement.Foreground="{DynamicResource TabControl.Foreground}"/>
                        <Border x:Name="highlightBorder" Grid.Column="0" Grid.Row="0" Background="{DynamicResource TabItem.Accent}" VerticalAlignment="Bottom" Height="2"/>
                        <Border x:Name="contentPanel" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" 
                                Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,2,2"/>
                            <Setter Property="Grid.Row" TargetName="highlightBorder" Value="1"/>
                            <Setter Property="VerticalAlignment" TargetName="highlightBorder" Value="Top"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,2,2"/>
                            <Setter Property="VerticalAlignment" TargetName="highlightBorder" Value="Stretch"/>
                            <Setter Property="Height" TargetName="highlightBorder" Value="Auto"/>
                            <Setter Property="HorizontalAlignment" TargetName="highlightBorder" Value="Right"/>
                            <Setter Property="Width" TargetName="highlightBorder" Value="2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,2,2"/>
                            <Setter Property="VerticalAlignment" TargetName="highlightBorder" Value="Stretch"/>
                            <Setter Property="Height" TargetName="highlightBorder" Value="Auto"/>
                            <Setter Property="HorizontalAlignment" TargetName="highlightBorder" Value="Left"/>
                            <Setter Property="Width" TargetName="highlightBorder" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="highlightBorder" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource TabControl.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    TabItems                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
        <Setter Property="Foreground" Value="{DynamicResource TabControl.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource TabItem.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TabItem.Border}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1,1,1,0" Margin="0">
                            <Border x:Name="innerBorder" Background="{StaticResource TabItem.Selected.Background}" 
                                    BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="1,1,1,0" Margin="-1,-1,-1,-3" Opacity="0">
                                <Border x:Name="highlightBorder" Background="{DynamicResource TabItem.Accent}" VerticalAlignment="Top" Height="2"/>
                            </Border>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False"
                                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="Margin" TargetName="innerBorder" Value="-1,-1,-3,-1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                            <Setter Property="VerticalAlignment" TargetName="highlightBorder" Value="Stretch"/>
                            <Setter Property="Height" TargetName="highlightBorder" Value="Auto"/>
                            <Setter Property="HorizontalAlignment" TargetName="highlightBorder" Value="Left"/>
                            <Setter Property="Width" TargetName="highlightBorder" Value="2"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                            <Setter Property="Padding" Value="6,0,6,6"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="Margin" TargetName="innerBorder" Value="-1,-3,-1,-1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                            <Setter Property="VerticalAlignment" TargetName="highlightBorder" Value="Bottom"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="Margin" TargetName="innerBorder" Value="-3,-1,-1,-1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                            <Setter Property="VerticalAlignment" TargetName="highlightBorder" Value="Stretch"/>
                            <Setter Property="Height" TargetName="highlightBorder" Value="Auto"/>
                            <Setter Property="HorizontalAlignment" TargetName="highlightBorder" Value="Right"/>
                            <Setter Property="Width" TargetName="highlightBorder" Value="2"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource TabControl.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>











    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    ToolBars                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightToolBarStyle" TargetType="{x:Type ToolBar}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Background" Value="{DynamicResource ToolBarHorizontalBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">                       
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" 
                                          IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          IsEnabled="{TemplateBinding HasOverflowItems}" Style="{DynamicResource ToolBarHorizontalOverflowButtonStyle}"/>
                            <Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false" Placement="Bottom" StaysOpen="false" 
                                   IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"  
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <Border x:Name="ToolBarSubMenuBorder" Background="{DynamicResource ToolBarSubMenuBackground}" 
                                        BorderBrush="{DynamicResource ToolBarMenuBorder}" BorderThickness="1" RenderOptions.ClearTypeHint="Enabled">
                                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                          FocusVisualStyle="{x:Null}" Focusable="true" Margin="2" 
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" 
                                                          WrapWidth="200"/>
                                </Border>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Style="{DynamicResource ToolBarMainPanelBorderStyle}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{DynamicResource ToolBarThumbStyle}" Width="10"/>
                                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="True">
                            <Setter Property="Effect" TargetName="ToolBarSubMenuBorder" Value="{DynamicResource DropShadowEffect}"/>
                            <Setter Property="Margin" TargetName="ToolBarSubMenuBorder" Value="0,0,5,5"/>
                        </Trigger>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                            <Setter Property="Style" TargetName="OverflowButton" Value="{DynamicResource ToolBarVerticalOverflowButtonStyle}"/>
                            <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                            <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                            <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
                            <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
                            <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                            <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                            <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                            <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                            <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                            <Setter Property="Background" Value="{DynamicResource ToolBarVerticalBackground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ToolBar.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  ToolBarTrays                                                               |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightToolBarTrayStyle" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{StaticResource ToolBarTrayBackground}"/>
    </Style>











    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    ToolTips                                                                 |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightToolTipStyle" TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource ToolTip.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ToolTip.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource ToolTip.Foreground}" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Padding" Value="6 3" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentControl x:Name="PART_ContentPresenter" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="OpenStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" From="Open" To="Closed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Closed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Open">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Root" Property="Effect" Value="{DynamicResource DropShadowEffect}" />
                            <Setter TargetName="Root" Property="Margin" Value="0,0,5,5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                    TreeViews                                                                |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightTreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource TreeView.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TreeView.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource TreeView.Foreground}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Border x:Name="highlightBorder" BorderBrush="{DynamicResource Accent}" BorderThickness="1" Margin="-3" Visibility="Collapsed">
                            <Border.Effect>
                                <BlurEffect Radius="5" KernelType="Gaussian"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="tv_scrollviewer" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" 
                                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="highlightBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource TreeView.Disabled.Foreground}"/>
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter Property="CanContentScroll" TargetName="tv_scrollviewer" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                  TreeViewItems                                                              |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style x:Key="DarkThemeHighlightTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="{DynamicResource TreeViewItem.Background}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource TreeViewItem.Foreground}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="1" Padding="{TemplateBinding Padding}" 
                                    SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource TreeViewItem.Selected.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItem.Foreground}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource TreeViewItem.Selected.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItem.Selected.Foreground}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource TreeViewItem.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>










    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
         |                                                                                                                             |
         |                                                Appy Styles to Controls                                                      |
         |                                                                                                                             |
         - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <Style BasedOn="{StaticResource DarkThemeHighlightButtonStyle}" TargetType="Button" />
    <Style BasedOn="{StaticResource DarkThemeHighlightCalendarStyle}" TargetType="Calendar" />
    <Style BasedOn="{StaticResource DarkThemeHighlightCheckBoxStyle}" TargetType="CheckBox" />
    <Style BasedOn="{StaticResource DarkThemeHighlightComboBoxStyle}" TargetType="ComboBox" />
    <Style BasedOn="{StaticResource DarkThemeHighlightComboBoxItemStyle}" TargetType="ComboBoxItem" />
    <Style BasedOn="{StaticResource DarkThemeHighlightContextMenuStyle}" TargetType="ContextMenu" />
    <Style BasedOn="{StaticResource DarkThemeHighlightContentControlStyle}" TargetType="ContentControl" />
    <Style BasedOn="{StaticResource DarkThemeHighlightDatePickerStyle}" TargetType="DatePicker" />
    <Style BasedOn="{StaticResource DarkThemeHighlightExpanderStyle}" TargetType="Expander" />
    <Style BasedOn="{StaticResource DarkThemeHighlightGridSplitterStyle}" TargetType="GridSplitter" />
    <Style BasedOn="{StaticResource DarkThemeHighlightGridViewColumnHeaderStyle}" TargetType="GridViewColumnHeader" />
    <Style BasedOn="{StaticResource DarkThemeHighlightGroupBoxStyle}" TargetType="GroupBox" />
    <Style BasedOn="{StaticResource DarkThemeHighlightHyperlinkStyle}" TargetType="Hyperlink" />
    <Style BasedOn="{StaticResource DarkThemeHighlightLabelStyle}" TargetType="Label" />
    <Style BasedOn="{StaticResource DarkThemeHighlightListBoxStyle}" TargetType="ListBox" />
    <Style BasedOn="{StaticResource DarkThemeHighlightListBoxItemStyle}" TargetType="ListBoxItem" />
    <Style BasedOn="{StaticResource DarkThemeHighlightListViewStyle}" TargetType="ListView" />
    <Style BasedOn="{StaticResource DarkThemeHighlightListViewItemStyle}" TargetType="ListViewItem" />
    <Style BasedOn="{StaticResource DarkThemeHighlightMenuStyle}" TargetType="Menu" />
    <Style BasedOn="{StaticResource DarkThemeHighlightMenuItemStyle}" TargetType="MenuItem" />
    <Style BasedOn="{StaticResource DarkThemeHighlightPasswordBoxStyle}" TargetType="PasswordBox" />
    <Style BasedOn="{StaticResource DarkThemeHighlightProgressBarStyle}" TargetType="ProgressBar" />
    <Style BasedOn="{StaticResource DarkThemeHighlightRadioButtonStyle}" TargetType="RadioButton" />
    <Style BasedOn="{StaticResource DarkThemeHighlightRichTextBoxStyle}" TargetType="RichTextBox" />
    <Style BasedOn="{StaticResource DarkThemeHighlightScrollBarStyle}" TargetType="ScrollBar" />
    <Style BasedOn="{StaticResource DarkThemeHighlightScrollViewerStyle}" TargetType="ScrollViewer" />
    <Style BasedOn="{StaticResource DarkThemeHighlightSeparatorStyle}" TargetType="Separator" />
    <Style BasedOn="{StaticResource DarkThemeHighlightSliderStyle}" TargetType="Slider" />
    <Style BasedOn="{StaticResource DarkThemeHighlightStatusBarStyle}" TargetType="StatusBar" />
    <Style BasedOn="{StaticResource DarkThemeHighlightStatusBarItemStyle}" TargetType="StatusBarItem" />
    <Style BasedOn="{StaticResource DarkThemeHighlightTabControlStyle}" TargetType="TabControl" />
    <Style BasedOn="{StaticResource DarkThemeHighlightTabItemStyle}" TargetType="TabItem" />
    <Style BasedOn="{StaticResource DarkThemeHighlightTextBoxStyle}" TargetType="TextBox" />
    <Style BasedOn="{StaticResource DarkThemeHighlightToolBarStyle}" TargetType="ToolBar" />
    <Style BasedOn="{StaticResource DarkThemeHighlightToolBarTrayStyle}" TargetType="ToolBarTray" />
    <Style BasedOn="{StaticResource DarkThemeHighlightToolTipStyle}" TargetType="ToolTip" />
    <Style BasedOn="{StaticResource DarkThemeHighlightTreeViewStyle}" TargetType="TreeView" />
    <Style BasedOn="{StaticResource DarkThemeHighlightTreeViewItemStyle}" TargetType="TreeViewItem" />
</ResourceDictionary>